---
import MainLayout from '@/layouts/MainLayout.astro';
import AdminProtection from '@/components/AdminProtection';

export const prerender = false;

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/admin/articles');
}
---

<MainLayout title="Editar Artículo | Reino Da Mata">
  <AdminProtection client:load>
    <div class="max-w-6xl mx-auto w-full px-4 py-8">
      <div class="mb-6 flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-green-700 mb-2">Editar Artículo</h1>
          <p class="text-gray-200">Modifica y actualiza el contenido del artículo.</p>
        </div>
        <a href="/admin/articles" class="text-green-400 hover:text-green-300 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
          </svg>
          <span>Volver a artículos</span>
        </a>
      </div>

      <div id="admin-container" class="relative">
        <!-- Estado de carga inicial -->
        <div id="loading" class="flex justify-center items-center py-20">
          <div class="text-center">
            <svg class="animate-spin h-12 w-12 text-green-500 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="text-green-300 text-lg">Cargando artículo...</p>
            <p class="text-gray-400 text-sm mt-2">Obteniendo datos desde Firebase</p>
          </div>
        </div>

        <!-- Formulario para editar artículo -->
        <div id="article-form-container" class="hidden">
          <!-- Indicador de autoguardado -->
          <div id="autosave-indicator" class="hidden mb-4 p-3 bg-blue-600/20 border border-blue-500/30 rounded-lg">
            <div class="flex items-center text-blue-300 text-sm">
              <svg class="animate-spin h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span id="autosave-text">Guardando cambios...</span>
            </div>
          </div>

          <!-- Información del artículo -->
          <div class="bg-green-900/30 p-4 rounded-lg backdrop-blur-sm mb-6">
            <div class="flex items-center justify-between">
              <div class="flex items-center space-x-4">
                <div class="flex items-center text-sm text-gray-300">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>Creado: <span id="created-date">-</span></span>
                </div>
                <div class="flex items-center text-sm text-gray-300">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  <span>Última actualización: <span id="updated-date">-</span></span>
                </div>
              </div>
              <div class="flex items-center space-x-2">
                <span id="status-badge" class="px-2 py-1 text-xs font-medium rounded-full">-</span>
                <span id="last-saved" class="hidden text-xs text-gray-400">
                  Guardado: <span id="save-time"></span>
                </span>
              </div>
            </div>
          </div>

          <div class="bg-green-900/30 p-6 rounded-lg backdrop-blur-sm">
            <form id="article-form" class="space-y-6">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Título -->
                <div class="col-span-1">
                  <label for="title" class="block text-white text-sm font-medium mb-2">
                    Título <span class="text-red-400">*</span>
                  </label>
                  <input
                    id="title"
                    type="text"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all duration-200"
                    required
                  />
                  <div id="title-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>

                <!-- Slug -->
                <div class="col-span-1">
                  <label for="slug" class="block text-white text-sm font-medium mb-2">
                    Slug <span class="text-red-400">*</span>
                    <span class="text-xs text-gray-400 font-normal ml-2">(URL amigable)</span>
                  </label>
                  <input
                    id="slug"
                    type="text"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all duration-200"
                    required
                  />
                  <div id="slug-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>

                <!-- Autor -->
                <div class="col-span-1">
                  <label for="author" class="block text-white text-sm font-medium mb-2">
                    Autor <span class="text-red-400">*</span>
                  </label>
                  <input
                    id="author"
                    type="text"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all duration-200"
                    required
                  />
                  <div id="author-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>

                <!-- Imagen destacada -->
                <div class="col-span-1">
                  <div id="image-uploader-container">
                    {/* ImageUploader se renderizará aquí */}
                  </div>
                  <div id="image-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>

                <!-- Descripción -->
                <div class="col-span-2">
                  <label for="excerpt" class="block text-white text-sm font-medium mb-2">
                    Descripción breve <span class="text-red-400">*</span>
                    <span class="text-xs text-gray-400 font-normal ml-2">
                      (<span id="char-count">0</span>/160 caracteres)
                    </span>
                  </label>
                  <textarea
                    id="excerpt"
                    rows="3"
                    maxlength="160"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all duration-200"
                    required
                  ></textarea>
                  <div id="excerpt-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>

                <!-- Etiquetas -->
                <div class="col-span-2">
                  <label class="block text-white text-sm font-medium mb-2">
                    Etiquetas
                  </label>
                  <div id="tags-input-react-container" class="col-span-2 space-y-2">
                    {/* TagsInput se renderizará aquí */}
                  </div>
                </div>

                <!-- Categoría -->
                <div class="col-span-1">
                  <label for="category" class="block text-white text-sm font-medium mb-2">
                    Categoría
                  </label>
                  <select
                    id="category"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all duration-200"
                  >
                    <option value="">Seleccionar categoría</option>
                    <option value="espiritualidad">Espiritualidad</option>
                    <option value="meditacion">Meditación</option>
                    <option value="crecimiento-personal">Crecimiento Personal</option>
                    <option value="mindfulness">Mindfulness</option>
                    <option value="bienestar">Bienestar</option>
                    <option value="umbanda">Umbanda</option>
                    <option value="rituales">Rituales</option>
                  </select>
                </div>

                <!-- Opciones -->
                <div class="col-span-1">
                  <label class="block text-white text-sm font-medium mb-2">Opciones</label>
                  <div class="space-y-3">
                    <div class="flex items-center">
                      <input
                        id="published"
                        type="checkbox"
                        class="w-5 h-5 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                      />
                      <label for="published" class="ml-2 text-white text-sm font-medium">
                        Artículo publicado
                      </label>
                    </div>
                    <div class="flex items-center">
                      <input
                        id="featured"
                        type="checkbox"
                        class="w-5 h-5 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                      />
                      <label for="featured" class="ml-2 text-white text-sm font-medium">
                        Artículo destacado
                      </label>
                    </div>
                    <div class="flex items-center">
                      <input
                        id="commentsEnabled"
                        type="checkbox"
                        class="w-5 h-5 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                      />
                      <label for="commentsEnabled" class="ml-2 text-white text-sm font-medium">
                        Permitir comentarios
                      </label>
                    </div>
                  </div>
                </div>

                <!-- Editor de contenido -->
                <div class="col-span-2">
                  <label class="block text-white text-sm font-medium mb-2">
                    Contenido <span class="text-red-400">*</span>
                  </label>
                  <div id="rich-text-editor-container" class="col-span-2 relative">
                     {/* El word-counter se mantiene, su lógica de actualización cambiará */}
                     <div id="word-counter" class="absolute bottom-3 right-3 text-xs text-gray-400 bg-green-900/80 px-2 py-1 rounded z-10">
                      0 palabras
                    </div>
                  </div>
                  <div id="content-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>
              </div>

              <!-- Botones de acción -->
              <div class="flex justify-between items-center pt-6 border-t border-green-600/30">
                <div class="flex space-x-3">
                  <button
                    type="button"
                    id="preview-btn"
                    class="px-6 py-3 bg-blue-600 hover:bg-blue-500 text-white font-medium rounded-lg shadow-md transition-all duration-200 flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                    Vista previa
                  </button>
                  <button
                    type="button"
                    id="save-draft-btn"
                    class="px-6 py-3 bg-gray-600 hover:bg-gray-500 text-white font-medium rounded-lg shadow-md transition-all duration-200 flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    Guardar borrador
                  </button>
                </div>
                <div class="flex space-x-3">
                  <a
                    href="/admin/articles"
                    class="px-6 py-3 bg-gray-500 hover:bg-gray-400 text-white font-medium rounded-lg shadow-md transition-all duration-200"
                  >
                    Cancelar
                  </a>
                  <button
                    type="submit"
                    id="submit-btn"
                    class="px-8 py-3 bg-green-600 hover:bg-green-500 text-white font-medium rounded-lg shadow-md transition-all duration-200 flex items-center"
                  >
                    <span>Actualizar artículo</span>
                  </button>
                </div>
              </div>
            </form>
          </div>

          <!-- Mensajes de estado -->
          <div id="success-message" class="hidden bg-green-600/80 text-white p-4 rounded-lg mt-6">
            <div class="flex items-center">
              <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <p class="font-medium">¡Artículo actualizado con éxito!</p>
            </div>
            <div class="flex space-x-4 mt-2">
              <a id="view-article-link" href="#" class="text-white underline hover:text-green-200" target="_blank">Ver artículo</a>
              <a href="/admin/articles" class="text-white underline hover:text-green-200">Volver a la lista</a>
            </div>
          </div>

          <div id="error-message" class="hidden bg-red-600/80 text-white p-4 rounded-lg mt-6">
            <div class="flex items-center">
              <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
              </svg>
              <div>
                <p class="font-medium">Error al actualizar el artículo</p>
                <p id="error-details" class="text-sm mt-1"></p>
              </div>
            </div>
          </div>
        </div>

        <!-- Modal de vista previa -->
        <div id="preview-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
          <div class="bg-green-900 p-6 rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-bold text-white">Vista previa del artículo</h3>
              <button id="close-preview" class="text-gray-400 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div id="preview-content" class="prose prose-invert prose-green max-w-none">
              <!-- Se llenará desde JavaScript -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminProtection>
</MainLayout>

<!-- Importar bibliotecas necesarias -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.4/dist/purify.min.js"></script>
<script src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

<script>
  import { db } from '@/core/firebase/config';
  import { doc, getDoc, updateDoc, serverTimestamp, collection, query, where, getDocs } from 'firebase/firestore';
  import RichTextEditor from "@/components/RichTextEditor";
  import ImageUploader from "@/components/ImageUploader";
  import TagsInput from "@/components/TagsInput";

  // Variables globales
  let articleId: string;
  let originalData: any = {};
  let currentTags: string[] = [];
  let currentContent: string = ''; // Para el RichTextEditor
  let isFormDirty = false;
  let autosaveTimeout: number | null = null;

  // Elementos del DOM
  const loadingElement = document.getElementById("loading");
  const articleFormContainer = document.getElementById("article-form-container");
  const articleForm = document.getElementById("article-form") as HTMLFormElement;
  const autosaveIndicator = document.getElementById("autosave-indicator");
  const autosaveText = document.getElementById("autosave-text");
  const lastSaved = document.getElementById("last-saved");
  const saveTime = document.getElementById("save-time");
  const successMessage = document.getElementById("success-message");
  const errorMessage = document.getElementById("error-message");
  const errorDetails = document.getElementById("error-details");
  const viewArticleLink = document.getElementById("view-article-link") as HTMLAnchorElement;
  const previewModal = document.getElementById("preview-modal");
  const previewContent = document.getElementById("preview-content");
  const closePreviewBtn = document.getElementById("close-preview");
  const submitBtn = document.getElementById("submit-btn") as HTMLButtonElement;
  const charCount = document.getElementById("char-count");
  const wordCounter = document.getElementById("word-counter");

  // Elementos de formulario
  const titleInput = document.getElementById("title") as HTMLInputElement;
  const slugInput = document.getElementById("slug") as HTMLInputElement;
  const authorInput = document.getElementById("author") as HTMLInputElement;
  const excerptInput = document.getElementById("excerpt") as HTMLTextAreaElement;
  const categoryInput = document.getElementById("category") as HTMLSelectElement;
  const publishedInput = document.getElementById("published") as HTMLInputElement;
  const featuredInput = document.getElementById("featured") as HTMLInputElement;
  const commentsEnabledInput = document.getElementById("commentsEnabled") as HTMLInputElement;

  // Obtener ID del artículo
  const pathParts = window.location.pathname.split('/');
  articleId = pathParts[pathParts.length - 1];

  // Funciones de utilidad
  function showError(message: string) {
    if (errorMessage && errorDetails) {
      errorDetails.textContent = message;
      errorMessage.classList.remove('hidden');
      setTimeout(() => {
        errorMessage.classList.add('hidden');
      }, 5000);
    }
  }

  function showSuccess(message: string) {
    if (successMessage) {
      successMessage.querySelector('p')!.textContent = message;
      successMessage.classList.remove('hidden');
      setTimeout(() => {
        successMessage.classList.add('hidden');
      }, 5000);
    }
  }

  function generateSlug(title: string): string {
    return title
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-z0-9\s-]/g, '')
      .trim()
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-');
  }

  function updateCharCount() {
    if (charCount && excerptInput) {
      const count = excerptInput.value.length;
      charCount.textContent = count.toString();
      charCount.className = count > 140 ? 'text-yellow-400' : count > 160 ? 'text-red-400' : 'text-gray-400';
    }
  }

  function updateWordCount() { // Ahora usa currentContent
    if (wordCounter) {
      // Simple split for word count, might need refinement if currentContent is HTML
      const textContent = currentContent.replace(/<[^>]+>/g, ' '); // Basic strip HTML for word count
      const words = textContent.split(/\s+/).filter(w => w.length > 0).length;
      wordCounter.textContent = `${words} palabras`;
    }
  }

  // Manejador para cambios en RichTextEditor
  function handleContentChange(newContent: string) {
    currentContent = newContent;
    isFormDirty = true;
    scheduleAutosave();
    updateWordCount(); // Actualizar contador de palabras
  }

  function handleImageChange(newUrl: string) {
    originalData.featuredImage = newUrl; // Asumimos que originalData se usa para enviar updates
    isFormDirty = true;
    scheduleAutosave();
    const imageErrorDiv = document.getElementById('image-error');
    if (imageErrorDiv) {
      imageErrorDiv.classList.add('hidden');
      imageErrorDiv.textContent = '';
    }
    // Opcional: re-validar si hay una función de validación para la URL de imagen
    // validateField({ value: newUrl }, imageErrorDiv, validators.image);
  }

  function handleImageError(errorMsg: string) {
    const imageErrorDiv = document.getElementById('image-error');
    if (imageErrorDiv) {
      imageErrorDiv.textContent = errorMsg;
      imageErrorDiv.classList.remove('hidden');
    }
  }

  function showAutosaveIndicator(text: string = "Guardando cambios...") {
    if (autosaveIndicator && autosaveText) {
      autosaveText.textContent = text;
      autosaveIndicator.classList.remove('hidden');
    }
  }

  function hideAutosaveIndicator() {
    if (autosaveIndicator) {
      setTimeout(() => {
        autosaveIndicator.classList.add('hidden');
      }, 2000);
    }
  }

  function updateLastSaved() {
    if (lastSaved && saveTime) {
      const now = new Date();
      saveTime.textContent = now.toLocaleTimeString();
      lastSaved.classList.remove('hidden');
    }
  }

  // Gestión de etiquetas (eliminada, ahora manejada por TagsInput.tsx)
  // function addTag(tag: string) { ... }
  // function removeTag(tag: string) { ... }
  // function renderTags() { ... }

  function handleTagsChange(newTags: string[]) {
    currentTags = newTags;
    isFormDirty = true;
    scheduleAutosave();
  }

  // Autoguardado
  async function saveDraft() {
    if (!isFormDirty) return;
    
    showAutosaveIndicator();
    
    try {
      const docRef = doc(db, 'articles', articleId);
      const updateData = {
        title: titleInput.value,
        slug: slugInput.value,
        author: authorInput.value,
        excerpt: excerptInput.value,
        content: currentContent, // Usar currentContent
        featuredImage: originalData.featuredImage, // Usar originalData.featuredImage
        category: categoryInput.value,
        tags: currentTags,
        published: publishedInput.checked,
        featured: featuredInput.checked,
        commentsEnabled: commentsEnabledInput.checked,
        updatedAt: serverTimestamp()
      };

      await updateDoc(docRef, updateData);
      
      if (autosaveText) autosaveText.textContent = "Cambios guardados";
      updateLastSaved();
      hideAutosaveIndicator();
      isFormDirty = false;
    } catch (error) {
      console.error("Error al guardar borrador:", error);
      if (autosaveText) autosaveText.textContent = "Error al guardar";
      hideAutosaveIndicator();
    }
  }

  function scheduleAutosave() {
    if (autosaveTimeout) clearTimeout(autosaveTimeout);
    autosaveTimeout = window.setTimeout(() => saveDraft(), 3000);
  }

  // Verificar si el slug existe
  async function checkSlugExists(slug: string): Promise<boolean> {
    try {
      const articlesRef = collection(db, 'articles');
      const q = query(articlesRef, where('slug', '==', slug));
      const querySnapshot = await getDocs(q);
      return querySnapshot.docs.some(doc => doc.id !== articleId);
    } catch (error) {
      console.error('Error checking slug:', error);
      return false;
    }
  }

  // Cargar artículo
  async function loadArticle() {
    try {
      const docRef = doc(db, 'articles', articleId);
      const docSnap = await getDoc(docRef);

      if (docSnap.exists()) {
        const article = docSnap.data();
        originalData = article;
        
        // Llenar formulario
        titleInput.value = article.title || '';
        slugInput.value = article.slug || '';
        authorInput.value = article.author || '';
        excerptInput.value = article.excerpt || '';
        currentContent = article.content || ''; // Cargar a currentContent
        originalData.featuredImage = article.featuredImage || ''; // Cargar a originalData
        categoryInput.value = article.category || '';
        publishedInput.checked = article.published || false;
        featuredInput.checked = article.featured || false;
        commentsEnabledInput.checked = article.commentsEnabled !== false;
        
        // Cargar etiquetas
        currentTags = article.tags || [];

        // Renderizar TagsInput
        const tagsContainer = document.getElementById('tags-input-react-container');
        if (tagsContainer && (window as any).React && (window as any).ReactDOM) {
          const root = (window as any).ReactDOM.createRoot(tagsContainer);
          const tagsElement = (window as any).React.createElement(TagsInput, {
            value: currentTags,
            onChange: handleTagsChange,
            placeholder: "Añade etiquetas (ej: umbanda, fe, historia)"
          });
          root.render(tagsElement);
        } else {
          console.error('TagsInput container o React/ReactDOM no encontrado.');
          // Opcional: Fallback a un input de texto simple si el componente React no carga
          const fallbackTagsInput = document.createElement('input');
          fallbackTagsInput.type = 'text';
          fallbackTagsInput.className = 'w-full px-4 py-2 bg-red-900/50 border border-red-700 text-white';
          fallbackTagsInput.placeholder = 'Error al cargar TagsInput. Ingrese etiquetas separadas por comas.';
          fallbackTagsInput.value = currentTags.join(', ');
          fallbackTagsInput.oninput = (e) => {
            currentTags = (e.target as HTMLInputElement).value.split(',').map(t => t.trim()).filter(t => t);
            isFormDirty = true;
            scheduleAutosave();
          };
          if (tagsContainer) tagsContainer.appendChild(fallbackTagsInput);
        }
        
        // Actualizar contadores
        updateCharCount();
        updateWordCount(); // Se llamará con currentContent

        // Renderizar RichTextEditor
        const editorContainer = document.getElementById('rich-text-editor-container');
        if (editorContainer && (window as any).React && (window as any).ReactDOM) {
          const root = (window as any).ReactDOM.createRoot(editorContainer);
          const editorElement = (window as any).React.createElement(RichTextEditor, {
            value: currentContent,
            onChange: handleContentChange,
            placeholder: "Escribe tu contenido aquí..."
          });
          root.render(editorElement);
        } else {
          console.error('RichTextEditor container o React/ReactDOM no encontrado.');
          // Fallback a textarea si el editor no carga
          const fallbackTextarea = document.createElement('textarea');
          fallbackTextarea.className = 'w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white font-mono transition-all duration-200 resize-y';
          fallbackTextarea.rows = 20;
          fallbackTextarea.placeholder = 'Error al cargar editor. Usando Markdown básico...';
          fallbackTextarea.value = currentContent;
          fallbackTextarea.oninput = (e) => handleContentChange((e.target as HTMLTextAreaElement).value);
          if(editorContainer) editorContainer.appendChild(fallbackTextarea);
        }

        // Renderizar ImageUploader
        const imageUploaderContainer = document.getElementById('image-uploader-container');
        if (imageUploaderContainer && (window as any).React && (window as any).ReactDOM) {
          const root = (window as any).ReactDOM.createRoot(imageUploaderContainer);
          const uploaderElement = (window as any).React.createElement(ImageUploader, {
            value: originalData.featuredImage,
            onChange: handleImageChange,
            onError: handleImageError,
            // Aquí puedes pasar más props si ImageUploader los acepta (ej. placeholder)
          });
          root.render(uploaderElement);
        } else {
          console.error('ImageUploader container o React/ReactDOM no encontrado.');
           // Opcional: Fallback a un input de URL simple si el componente React no carga
          const fallbackImgInput = document.createElement('input');
          fallbackImgInput.type = 'url';
          fallbackImgInput.className = 'w-full px-4 py-2 bg-red-900/50 border border-red-700 text-white';
          fallbackImgInput.placeholder = 'Error al cargar ImageUploader. Ingrese URL manualmente.';
          fallbackImgInput.value = originalData.featuredImage;
          fallbackImgInput.oninput = (e) => handleImageChange((e.target as HTMLInputElement).value);
          if (imageUploaderContainer) imageUploaderContainer.appendChild(fallbackImgInput);
        }
        
        // Actualizar información del artículo
        const createdDate = document.getElementById('created-date');
        const updatedDate = document.getElementById('updated-date');
        const statusBadge = document.getElementById('status-badge');
        
        if (createdDate && article.publishDate) {
          createdDate.textContent = new Date(article.publishDate.toDate()).toLocaleDateString();
        }
        
        if (updatedDate && article.updatedAt) {
          updatedDate.textContent = new Date(article.updatedAt.toDate()).toLocaleDateString();
        }
        
        if (statusBadge) {
          if (article.published) {
            statusBadge.textContent = 'Publicado';
            statusBadge.className = 'px-2 py-1 text-xs font-medium rounded-full bg-green-600 text-white';
          } else {
            statusBadge.textContent = 'Borrador';
            statusBadge.className = 'px-2 py-1 text-xs font-medium rounded-full bg-yellow-600 text-white';
          }
        }

        // Mostrar formulario
        loadingElement?.classList.add('hidden');
        articleFormContainer?.classList.remove('hidden');
      } else {
        showError('Artículo no encontrado');
        setTimeout(() => {
          window.location.href = '/admin/articles';
        }, 2000);
      }
    } catch (error) {
      console.error('Error loading article:', error);
      showError('Error al cargar el artículo: ' + (error instanceof Error ? error.message : 'Error desconocido'));
    }
  }

  // Manejar envío del formulario
  async function handleSubmit(e: Event) {
    e.preventDefault();
    
    // Validaciones básicas
    if (!titleInput.value.trim() || !currentContent.trim()) { // Usar currentContent
      showError('El título y el contenido son requeridos');
      return;
    }
    
    // Verificar slug duplicado
    if (slugInput.value !== originalData.slug) {
      const slugExists = await checkSlugExists(slugInput.value);
      if (slugExists) {
        showError('El slug ya existe. Por favor, elige otro.');
        return;
      }
    }
    
    // Mostrar estado de carga
    submitBtn.disabled = true;
    submitBtn.innerHTML = `
      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <span>Actualizando...</span>
    `;
    
    try {
      const docRef = doc(db, 'articles', articleId);
      const updateData = {
        title: titleInput.value.trim(),
        slug: slugInput.value.trim(),
        author: authorInput.value.trim(),
        excerpt: excerptInput.value.trim(),
        content: currentContent.trim(), // Usar currentContent
        featuredImage: originalData.featuredImage.trim(), // Usar originalData.featuredImage
        category: categoryInput.value,
        tags: currentTags,
        published: publishedInput.checked,
        featured: featuredInput.checked,
        commentsEnabled: commentsEnabledInput.checked,
        updatedAt: serverTimestamp()
      };

      await updateDoc(docRef, updateData);
      
      // Actualizar enlace de vista
      if (viewArticleLink) {
        viewArticleLink.href = `/blog/${updateData.slug}`;
      }
      
      showSuccess('¡Artículo actualizado con éxito!');
      isFormDirty = false;
      
    } catch (error) {
      console.error('Error updating article:', error);
      showError('Error al actualizar el artículo: ' + (error instanceof Error ? error.message : 'Error desconocido'));
    } finally {
      // Restaurar botón
      submitBtn.disabled = false;
      submitBtn.innerHTML = '<span>Actualizar artículo</span>';
    }
  }

  // Mostrar vista previa
  function showPreview() {
    if (!previewContent || !previewModal) return;
    
    try {
      const title = titleInput.value || "Sin título";
      const author = authorInput.value || "Sin autor";
      const excerpt = excerptInput.value || "Sin descripción";
      const content = currentContent || "*No hay contenido para mostrar*"; // Usar currentContent
      const image = originalData.featuredImage;
      
      // Verificar que marked y DOMPurify estén disponibles
      if (typeof window !== 'undefined' && (window as any).marked && (window as any).DOMPurify) {
        const htmlContent = (window as any).DOMPurify.sanitize((window as any).marked.parse(content));
        
        let previewHtml = `
          <div class="mb-6">
            <h1 class="text-3xl font-bold text-white mb-2">${title}</h1>
            <p class="text-gray-300 mb-4">Por ${author}</p>
            <p class="text-gray-400 italic">${excerpt}</p>
          </div>
        `;
        
        if (image) {
          previewHtml += `
            <div class="mb-6">
              <img src="${image}" alt="${title}" class="w-full h-64 object-cover rounded-lg" />
            </div>
          `;
        }
        
        previewHtml += `<div class="prose prose-invert prose-green max-w-none">${htmlContent}</div>`;
        
        previewContent.innerHTML = previewHtml;
        previewModal.classList.remove("hidden");
      } else {
        alert("Las librerías de vista previa no están disponibles.");
      }
    } catch (error) {
      console.error("Error al generar vista previa:", error);
      alert("Error al generar la vista previa.");
    }
  }

  // Configurar eventos
  function setupEventListeners() {
    // Formulario
    articleForm.addEventListener("submit", handleSubmit);
    
    // Campos de entrada
    titleInput.addEventListener('input', () => {
      isFormDirty = true;
      scheduleAutosave();
    });
    
    slugInput.addEventListener('input', () => {
      slugInput.value = generateSlug(slugInput.value);
      isFormDirty = true;
      scheduleAutosave();
    });
    
    authorInput.addEventListener('input', () => {
      isFormDirty = true;
      scheduleAutosave();
    });
    
    excerptInput.addEventListener('input', () => {
      updateCharCount();
      isFormDirty = true;
      scheduleAutosave();
    });
    
    // El listener para contentInput se elimina, RichTextEditor usa su propio onChange.
    // El updateWordCount y scheduleAutosave se llaman desde handleContentChange.
    
    // El listener para featuredImageInput se elimina, ImageUploader usa su propio onChange.
    
    categoryInput.addEventListener('change', () => {
      isFormDirty = true;
      scheduleAutosave();
    });
    
    [publishedInput, featuredInput, commentsEnabledInput].forEach(checkbox => {
      checkbox.addEventListener('change', () => {
        isFormDirty = true;
        scheduleAutosave();
      });
    });
    
    // Auto-generar slug
    titleInput.addEventListener('input', () => {
      if (!slugInput.value || slugInput.value === generateSlug(originalData.title || '')) {
        slugInput.value = generateSlug(titleInput.value);
      }
    });
    
    // Etiquetas - Event listener eliminado, ahora manejado por TagsInput.tsx
    // tagsInput.addEventListener('keydown', (e) => { ... });
    
    // Botones
    document.getElementById('preview-btn')?.addEventListener('click', showPreview);
    document.getElementById('save-draft-btn')?.addEventListener('click', () => saveDraft());
    
    // Modal de vista previa
    closePreviewBtn?.addEventListener('click', () => {
      previewModal?.classList.add('hidden');
    });
    
    previewModal?.addEventListener('click', (e) => {
      if (e.target === previewModal) {
        previewModal.classList.add('hidden');
      }
    });
    
    // Cerrar modales con Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && previewModal && !previewModal.classList.contains('hidden')) {
        previewModal.classList.add('hidden');
      }
    });
  }

  // Hacer funciones globales para los botones - removeTag ya no es global
  // (window as any).removeTag = removeTag;

  // Inicializar
  setupEventListeners();
  loadArticle();

  // Limpiar timeout al salir
  window.addEventListener('beforeunload', () => {
    if (autosaveTimeout) clearTimeout(autosaveTimeout);
    if (isFormDirty) {
      saveDraft();
    }
  });
</script>

<style>
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* #content se refiere al antiguo textarea, podría eliminarse o adaptarse si es necesario para el contenedor del editor */
  #rich-text-editor-container textarea, /* Estilo para el fallback textarea */
  #rich-text-editor-container .ProseMirror { /* Asumiendo que RichTextEditor usa ProseMirror y tiene esa clase */
    font-family: 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;
    line-height: 1.6;
    min-height: 300px; /* Asegurar altura mínima para el editor */
  }

  /* Estilos para las etiquetas */
  #tags-display .tag-item {
    transition: all 0.2s ease;
  }

  #tags-display .tag-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  /* Animaciones suaves */
  .transition-all {
    transition: all 0.2s ease;
  }

  /* Mejoras visuales para inputs */
  input:focus, textarea:focus, select:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(34, 197, 94, 0.2);
  }
</style>
