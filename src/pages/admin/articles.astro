---
import MainLayout from "@/layouts/MainLayout.astro";
import AdminProtection from "@/components/AdminProtection";

// Configurar para renderizado del servidor
export const prerender = false;
---

<MainLayout title="Gestión de Artículos | Reino Da Mata">
  <AdminProtection client:load>
    <div class="max-w-7xl mx-auto w-full px-4 py-8">
      <div class="mb-8 flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-green-700 mb-2">Gestión de Artículos</h1>
          <p class="text-gray-200">Administra todos los artículos y borradores del blog</p>
        </div>
        <a
          href="/admin/articles/new"
          class="px-6 py-3 bg-green-600 hover:bg-green-500 text-white font-medium rounded-md shadow-md transition-colors duration-300 flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
          </svg>
          Nuevo Artículo
        </a>
      </div>

      <div id="admin-container" class="relative">
        <!-- Estado de carga inicial -->
        <div id="loading" class="flex justify-center items-center py-10">
          <svg class="animate-spin h-10 w-10 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span class="ml-3 text-green-300">Cargando...</span>
        </div>

        <!-- Contenido principal -->
        <div id="content-container" class="space-y-8">
          <!-- Estadísticas -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div class="bg-green-900/30 p-6 rounded-lg backdrop-blur-sm">
              <div class="flex items-center">
                <div class="p-3 bg-green-600 rounded-lg">
                  <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </div>
                <div class="ml-4">
                  <p class="text-sm font-medium text-gray-400">Total Artículos</p>
                  <p class="text-2xl font-bold text-white" id="total-articles">0</p>
                </div>
              </div>
            </div>

            <div class="bg-green-900/30 p-6 rounded-lg backdrop-blur-sm">
              <div class="flex items-center">
                <div class="p-3 bg-blue-600 rounded-lg">
                  <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                  </svg>
                </div>
                <div class="ml-4">
                  <p class="text-sm font-medium text-gray-400">Borradores</p>
                  <p class="text-2xl font-bold text-white" id="total-drafts">0</p>
                </div>
              </div>
            </div>

            <div class="bg-green-900/30 p-6 rounded-lg backdrop-blur-sm">
              <div class="flex items-center">
                <div class="p-3 bg-yellow-600 rounded-lg">
                  <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                  </svg>
                </div>
                <div class="ml-4">
                  <p class="text-sm font-medium text-gray-400">Destacados</p>
                  <p class="text-2xl font-bold text-white" id="featured-count">0</p>
                </div>
              </div>
            </div>

            <div class="bg-green-900/30 p-6 rounded-lg backdrop-blur-sm">
              <div class="flex items-center">
                <div class="p-3 bg-purple-600 rounded-lg">
                  <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                </div>
                <div class="ml-4">
                  <p class="text-sm font-medium text-gray-400">Publicados</p>
                  <p class="text-2xl font-bold text-white" id="published-count">0</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Filtros y búsqueda -->
          <div class="bg-green-900/30 p-6 rounded-lg backdrop-blur-sm">
            <div class="flex flex-col md:flex-row gap-4 items-center justify-between">
              <div class="flex items-center space-x-4">
                <div class="relative">
                  <input
                    type="text"
                    id="search-input"
                    placeholder="Buscar artículos..."
                    class="pl-10 pr-4 py-2 bg-green-700/50 border border-green-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-400 text-white"
                  />
                  <svg class="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>

                <select id="status-filter" class="px-4 py-2 bg-green-700/50 border border-green-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-400 text-white">
                  <option value="all">Todos</option>
                  <option value="published">Publicados</option>
                  <option value="draft">Borradores</option>
                  <option value="featured">Destacados</option>
                </select>
              </div>

              <div class="flex items-center space-x-2">
                <button
                  id="refresh-btn"
                  class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-md transition-colors"
                >
                  <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                </button>
              </div>
            </div>
          </div>

          <!-- Lista de artículos -->
          <div class="bg-green-900/30 rounded-lg backdrop-blur-sm overflow-hidden">
            <div class="px-6 py-4 border-b border-green-600">
              <h2 class="text-xl font-bold text-white">Artículos</h2>
            </div>

            <div id="articles-list" class="divide-y divide-green-600">
              <!-- Se llenará desde JavaScript -->
            </div>
          </div>

          <!-- Lista de borradores -->
          <div class="bg-green-900/30 rounded-lg backdrop-blur-sm overflow-hidden">
            <div class="px-6 py-4 border-b border-green-600">
              <h2 class="text-xl font-bold text-white">Borradores</h2>
            </div>

            <div id="drafts-list" class="divide-y divide-green-600">
              <!-- Se llenará desde JavaScript -->
            </div>
          </div>
        </div>

        <!-- Mensajes de estado -->
        <div id="success-message" class="hidden bg-green-600/80 text-white p-4 rounded-md my-4">
          <div class="flex items-center">
            <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
            <p class="font-medium" id="success-text">Operación completada con éxito</p>
          </div>
        </div>

        <div id="error-message" class="hidden bg-red-600/80 text-white p-4 rounded-md my-4">
          <div class="flex items-center">
            <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
            <div>
              <p class="font-medium">Error</p>
              <p id="error-details" class="text-sm mt-1"></p>
            </div>
          </div>
        </div>

        <!-- Modal de confirmación -->
        <div id="confirm-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
          <div class="bg-green-900 p-6 rounded-lg max-w-md w-full">
            <div class="flex items-center mb-4">
              <svg class="h-6 w-6 text-red-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
              <h3 class="text-lg font-bold text-white">Confirmar eliminación</h3>
            </div>
            <p class="text-gray-300 mb-6" id="confirm-message">¿Estás seguro de que quieres eliminar este elemento?</p>
            <div class="flex justify-end space-x-4">
              <button
                id="cancel-btn"
                class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-md transition-colors"
              >
                Cancelar
              </button>
              <button
                id="confirm-btn"
                class="px-4 py-2 bg-red-600 hover:bg-red-500 text-white rounded-md transition-colors"
              >
                Eliminar
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminProtection>
</MainLayout>

<script>
  // Importación dinámica de servicios
  let auth, onAuthStateChanged, getAllArticles, getAllDrafts, deleteArticle, deleteDraft, publishDraftAsArticle;
  
  // Función para inicializar con servicios cargados desde el servidor
  async function loadServices() {
    try {
      // Verificar si los servicios ya están disponibles globalmente
      // (cargados por el AdminProtection component)
      if (window.firebaseConfig && window.articleServices) {
        auth = window.firebaseConfig.auth;
        onAuthStateChanged = window.firebaseConfig.onAuthStateChanged;
        getAllArticles = window.articleServices.getAllArticles;
        getAllDrafts = window.articleServices.getAllDrafts;
        deleteArticle = window.articleServices.deleteArticle;
        deleteDraft = window.articleServices.deleteDraft;
        publishDraftAsArticle = window.articleServices.publishDraftAsArticle;
        
        initializeAdmin();
      } else {
        // Fallback: intentar cargar después de un delay
        setTimeout(loadServices, 100);
      }
    } catch (error) {
      console.error('Error loading services:', error);
      showMessage('error', 'Error al cargar los servicios necesarios');
    }
  }

  // Variables de control
  let articles = [];
  let drafts = [];
  let currentFilter = 'all';
  let searchTerm = '';

  // Elementos del DOM - se obtendrán dinámicamente
  let loadingElement, contentContainer, articlesListElement, draftsListElement;
  let searchInput, statusFilter, refreshBtn;
  let successMessage, successText, errorMessage, errorDetails;
  let confirmModal, confirmMessage, cancelBtn, confirmBtn;

  // Variables para confirmación
  let pendingAction = null;

  // Función para obtener elementos del DOM
  const getDOMElements = () => {
    loadingElement = document.getElementById("loading");
    contentContainer = document.getElementById("content-container");
    articlesListElement = document.getElementById("articles-list");
    draftsListElement = document.getElementById("drafts-list");
    searchInput = document.getElementById("search-input");
    statusFilter = document.getElementById("status-filter");
    refreshBtn = document.getElementById("refresh-btn");
    successMessage = document.getElementById("success-message");
    successText = document.getElementById("success-text");
    errorMessage = document.getElementById("error-message");
    errorDetails = document.getElementById("error-details");
    confirmModal = document.getElementById("confirm-modal");
    confirmMessage = document.getElementById("confirm-message");
    cancelBtn = document.getElementById("cancel-btn");
    confirmBtn = document.getElementById("confirm-btn");
  };

  // Funciones globales para los botones
  // Usar JavaScript puro para evitar conflictos de TypeScript
  window['deleteItem'] = function(id, type, title) {
    showConfirmModal(
      `¿Estás seguro de que quieres eliminar "${title}"?`,
      () => handleDelete(id, type)
    );
  };

  window['publishDraft'] = function(id) {
    showConfirmModal(
      '¿Quieres publicar este borrador? Se convertirá en un artículo público.',
      () => handlePublishDraft(id)
    );
  };

  // Cargar datos
  const loadData = async () => {
    console.log('🔄 Iniciando carga de datos...');
    try {
      const [articlesData, draftsData] = await Promise.all([
        getAllArticles(),
        getAllDrafts()
      ]);
      
      console.log('📝 Datos obtenidos:', { articlesCount: articlesData.length, draftsCount: draftsData.length });
      
      articles = articlesData;
      drafts = draftsData;
      
      // Asegurar que el contenedor principal esté visible
      getDOMElements();
      if (contentContainer && contentContainer.classList.contains('hidden')) {
        contentContainer.classList.remove('hidden');
        console.log('🔓 Contenedor principal mostrado');
      }
      
      console.log('🔍 Elementos DOM encontrados:', {
        articlesListElement: !!articlesListElement,
        draftsListElement: !!draftsListElement,
        loadingElement: !!loadingElement,
        contentContainer: !!contentContainer,
        contentVisible: contentContainer ? !contentContainer.classList.contains('hidden') : 'N/A',
        contentContainerDisplay: contentContainer ? window.getComputedStyle(contentContainer).display : 'N/A'
      });
      
      // Solo proceder si los elementos principales existen
      if (articlesListElement && draftsListElement) {
        console.log('✅ Renderizando contenido...');
        
        // Ocultar spinner de carga
        if (loadingElement && !loadingElement.classList.contains('hidden')) {
          loadingElement.classList.add('hidden');
          console.log('✅ Spinner de carga ocultado');
        }
        
        // Configurar event listeners ahora que todos los elementos están disponibles
        setupEventListeners();
        
        filterAndRender();
        updateStats();
      } else {
        console.warn('⚠️ Elementos DOM no encontrados, reintentando...');
        setTimeout(() => {
          getDOMElements();
          console.log('🔍 Segundo intento - Elementos DOM:', {
            articlesListElement: !!articlesListElement,
            draftsListElement: !!draftsListElement
          });
          if (articlesListElement && draftsListElement) {
            console.log('✅ Renderizando contenido (segundo intento)...');
            
            // Ocultar spinner de carga
            if (loadingElement && !loadingElement.classList.contains('hidden')) {
              loadingElement.classList.add('hidden');
              console.log('✅ Spinner de carga ocultado (segundo intento)');
            }
            
            // Configurar event listeners ahora que todos los elementos están disponibles
            setupEventListeners();
            
            filterAndRender();
            updateStats();
          } else {
            console.error('❌ No se pudieron encontrar los elementos DOM después del segundo intento');
          }
        }, 500); // Aumenté el tiempo de espera
      }
    } catch (error) {
      console.error('❌ Error al cargar datos:', error);
      showMessage('error', 'Error al cargar los artículos');
    }
  };

  // Funciones de utilidad
  const formatDate = (timestamp) => {
    if (!timestamp) return 'Sin fecha';
    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
    return date.toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const truncateText = (text, maxLength = 100) => {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  };

  const showMessage = (type, message) => {
    // Asegurar que los elementos existen
    if (!successMessage || !successText || !errorMessage || !errorDetails) {
      getDOMElements();
    }

    if (type === 'success') {
      if (successText) successText.textContent = message;
      if (successMessage) successMessage.classList.remove('hidden');
      if (errorMessage) errorMessage.classList.add('hidden');
    } else {
      if (errorDetails) errorDetails.textContent = message;
      if (errorMessage) errorMessage.classList.remove('hidden');
      if (successMessage) successMessage.classList.add('hidden');
    }

    setTimeout(() => {
      if (successMessage) successMessage.classList.add('hidden');
      if (errorMessage) errorMessage.classList.add('hidden');
    }, 5000);
  };

  const showConfirmModal = (message, action) => {
    // Asegurar que los elementos existen
    if (!confirmMessage || !confirmModal) {
      getDOMElements();
    }

    if (confirmMessage) confirmMessage.textContent = message;
    pendingAction = action;
    if (confirmModal) confirmModal.classList.remove('hidden');
  };

  const hideConfirmModal = () => {
    if (!confirmModal) {
      getDOMElements();
    }
    if (confirmModal) confirmModal.classList.add('hidden');
    pendingAction = null;
  };

  // Renderizar artículo
  const renderArticle = (article, isDraft = false) => {
    console.log('🎨 Renderizando artículo:', { 
      id: article.id, 
      title: article.title, 
      isDraft, 
      hasDescription: !!article.description,
      hasAuthor: !!article.author,
      hasTags: !!article.tags,
      hasSlug: !!article.slug
    });

    // Validar datos del artículo
    if (!article || !article.id || !article.title) {
      console.error('❌ Artículo inválido:', article);
      return '<div class="p-6 text-center text-red-400">Error: Artículo con datos incompletos</div>';
    }

    // Proporcionar valores por defecto para campos que pueden estar undefined
    const title = article.title || 'Sin título';
    const description = article.description || 'Sin descripción';
    const author = article.author || 'Autor desconocido';
    const tags = article.tags || [];
    const slug = article.slug || 'sin-slug';

    const statusBadge = article.draft ?
      '<span class="px-2 py-1 bg-yellow-600 text-white text-xs rounded-full">Borrador</span>' :
      '<span class="px-2 py-1 bg-green-600 text-white text-xs rounded-full">Publicado</span>';

    const featuredBadge = article.featured ?
      '<span class="px-2 py-1 bg-purple-600 text-white text-xs rounded-full">Destacado</span>' : '';

    const publishDate = isDraft ?
      formatDate(article.updatedAt) :
      formatDate(article.publishDate || article.updatedAt);

    // Escapar caracteres especiales en el título para evitar problemas en onclick
    const escapedTitle = title.replace(/'/g, '&#39;').replace(/"/g, '&quot;');

    const articleHTML = `
      <div class="p-6 hover:bg-green-800/20 transition-colors">
        <div class="flex items-start justify-between">
          <div class="flex-1">
            <div class="flex items-center space-x-2 mb-2">
              <h3 class="text-lg font-semibold text-white">${title}</h3>
              ${statusBadge}
              ${featuredBadge}
            </div>
            <p class="text-gray-300 text-sm mb-2">${truncateText(description)}</p>
            <div class="flex items-center text-xs text-gray-400 space-x-4">
              <span>Por ${author}</span>
              <span>${publishDate}</span>
              <span>${tags.length} etiquetas</span>
            </div>
          </div>
          <div class="flex items-center space-x-2 ml-4">
            ${!article.draft ? `
              <a
                href="/blog/${slug}"
                target="_blank"
                class="p-2 text-blue-400 hover:text-blue-300 transition-colors"
                title="Ver artículo"
              >
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
              </a>
            ` : ''}
            <a
              href="/admin/articles/edit/${article.id}"
              class="p-2 text-green-400 hover:text-green-300 transition-colors"
              title="Editar"
            >
              <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
            </a>
            ${isDraft ? `
              <button
                onclick="window['publishDraft']('${article.id}')"
                class="p-2 text-blue-400 hover:text-blue-300 transition-colors"
                title="Publicar borrador"
              >
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </button>
            ` : ''}
            <button
              onclick="window['deleteItem']('${article.id}', '${isDraft ? 'draft' : 'article'}', '${escapedTitle}')"
              class="p-2 text-red-400 hover:text-red-300 transition-colors"
              title="Eliminar"
            >
              <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    `;

    console.log('✅ HTML generado para artículo:', article.id);
    return articleHTML;
  };

  // Filtrar y renderizar contenido
  const filterAndRender = () => {
    console.log('🎨 Iniciando filterAndRender...');
    
    // Asegurar que los elementos existen
    if (!articlesListElement || !draftsListElement) {
      console.log('🔍 Reobteniendo elementos DOM en filterAndRender...');
      getDOMElements();
    }

    if (!articlesListElement || !draftsListElement) {
      console.error('❌ No se pueden renderizar: elementos DOM no encontrados');
      return;
    }

    let filteredArticles = articles;
    let filteredDrafts = drafts;

    console.log('📊 Datos a filtrar:', { 
      totalArticles: articles.length, 
      totalDrafts: drafts.length,
      searchTerm,
      currentFilter
    });

    // Aplicar filtro de búsqueda
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filteredArticles = articles.filter(article =>
        article.title.toLowerCase().includes(searchLower) ||
        article.description.toLowerCase().includes(searchLower) ||
        article.author.toLowerCase().includes(searchLower) ||
        article.tags.some(tag => tag.toLowerCase().includes(searchLower))
      );
      filteredDrafts = drafts.filter(draft =>
        draft.title.toLowerCase().includes(searchLower) ||
        draft.description.toLowerCase().includes(searchLower) ||
        draft.author.toLowerCase().includes(searchLower) ||
        draft.tags.some(tag => tag.toLowerCase().includes(searchLower))
      );
    }

    // Aplicar filtro de estado
    if (currentFilter === 'published') {
      filteredArticles = filteredArticles.filter(article => !article.draft);
      filteredDrafts = [];
    } else if (currentFilter === 'draft') {
      filteredArticles = filteredArticles.filter(article => article.draft);
    } else if (currentFilter === 'featured') {
      filteredArticles = filteredArticles.filter(article => article.featured);
      filteredDrafts = filteredDrafts.filter(draft => draft.featured);
    }

    console.log('📊 Datos filtrados:', { 
      filteredArticles: filteredArticles.length, 
      filteredDrafts: filteredDrafts.length 
    });

    // Renderizar artículos - con verificación de existencia
    if (articlesListElement) {
      if (filteredArticles.length === 0) {
        articlesListElement.innerHTML = '<div class="p-6 text-center text-gray-400">No se encontraron artículos</div>';
        console.log('📝 Renderizado: No hay artículos para mostrar');
      } else {
        const articlesHTML = filteredArticles.map(article => renderArticle(article, false)).join('');
        console.log('🔤 HTML generado para artículos (primeros 300 chars):', articlesHTML.substring(0, 300) + '...');
        articlesListElement.innerHTML = articlesHTML;
        console.log(`📝 Renderizados ${filteredArticles.length} artículos`);
        console.log('🔍 Elemento DOM después del renderizado:', articlesListElement.children.length, 'elementos hijos');
        console.log('🔍 Estilos del contenedor:', { 
          display: window.getComputedStyle(articlesListElement).display, 
          visibility: window.getComputedStyle(articlesListElement).visibility, 
          opacity: window.getComputedStyle(articlesListElement).opacity,
          parentVisible: window.getComputedStyle(articlesListElement.parentElement).display !== 'none',
          parentClasses: articlesListElement.parentElement.className
        });
      }
    } else {
      console.error('❌ No se puede renderizar artículos: articlesListElement es null');
    }

    // Renderizar borradores - con verificación de existencia
    if (draftsListElement) {
      if (filteredDrafts.length === 0) {
        draftsListElement.innerHTML = '<div class="p-6 text-center text-gray-400">No se encontraron borradores</div>';
        console.log('📝 Renderizado: No hay borradores para mostrar');
      } else {
        const draftsHTML = filteredDrafts.map(draft => renderArticle(draft, true)).join('');
        console.log('🔤 HTML generado para borradores (primeros 200 chars):', draftsHTML.substring(0, 200) + '...');
        draftsListElement.innerHTML = draftsHTML;
        console.log(`📝 Renderizados ${filteredDrafts.length} borradores`);
        console.log('🔍 Elemento DOM después del renderizado:', draftsListElement.children.length, 'elementos hijos');
      }
    } else {
      console.error('❌ No se puede renderizar borradores: draftsListElement es null');
    }
  };

  // Manejar eliminación
  const handleDelete = async (id, type) => {
    try {
      if (typeof deleteArticle !== 'function' || typeof deleteDraft !== 'function') {
        showMessage('error', 'Servicios no cargados. Recarga la página.');
        return;
      }
      
      if (!auth?.currentUser) {
        showMessage('error', 'Debes estar autenticado para eliminar elementos');
        return;
      }
      
      if (type === 'article') {
        await deleteArticle(id);
        articles = articles.filter(article => article.id !== id);
      } else {
        await deleteDraft(id);
        drafts = drafts.filter(draft => draft.id !== id);
      }
      
      filterAndRender();
      updateStats();
      showMessage('success', `${type === 'article' ? 'Artículo' : 'Borrador'} eliminado con éxito`);
    } catch (error) {
      console.error('❌ Error completo al eliminar:', error);
      console.error('❌ Código de error:', error.code);
      console.error('❌ Mensaje de error:', error.message);
      console.error('❌ Stack trace:', error.stack);
      
      let errorMessage = 'Error al eliminar el elemento';
      
      if (error.code === 'permission-denied') {
        errorMessage = 'Sin permisos para eliminar. Verifica que seas administrador.';
        console.error('🔒 Error de permisos - usuario actual:', auth?.currentUser?.email);
      } else if (error.code === 'not-found') {
        errorMessage = 'El elemento no existe o ya fue eliminado.';
      } else if (error.code === 'unavailable') {
        errorMessage = 'Problema de conexión. Intenta de nuevo.';
      }
      
      showMessage('error', errorMessage);
    }
  };

  // Manejar publicación de borrador
  const handlePublishDraft = async (id) => {
    try {
      const articleId = await publishDraftAsArticle(id);
      
      // Actualizar listas
      const draft = drafts.find(d => d.id === id);
      if (draft) {
        drafts = drafts.filter(d => d.id !== id);
        articles.unshift({ ...draft, id: articleId, draft: false });
      }

      filterAndRender();
      updateStats();
      showMessage('success', 'Borrador publicado con éxito');
    } catch (error) {
      console.error('Error al publicar borrador:', error);
      showMessage('error', 'Error al publicar el borrador');
    }
  };

  // Actualizar estadísticas
  const updateStats = () => {
    const totalArticlesEl = document.getElementById('total-articles');
    const totalDraftsEl = document.getElementById('total-drafts');
    const featuredCountEl = document.getElementById('featured-count');
    const publishedCountEl = document.getElementById('published-count');

    if (totalArticlesEl) totalArticlesEl.textContent = String(articles.length);
    if (totalDraftsEl) totalDraftsEl.textContent = String(drafts.length);
    if (featuredCountEl) featuredCountEl.textContent = String(articles.filter(a => a.featured).length);
    if (publishedCountEl) publishedCountEl.textContent = String(articles.filter(a => !a.draft).length);
  };

  // Event listeners
  const setupEventListeners = () => {
    // Asegurar que tenemos todos los elementos DOM
    getDOMElements();

    // Búsqueda
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        searchTerm = e.target.value;
        filterAndRender();
      });
    }

    // Filtro de estado
    if (statusFilter) {
      statusFilter.addEventListener('change', (e) => {
        currentFilter = e.target.value;
        filterAndRender();
      });
    }

    // Botón de actualizar
    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => {
        loadData();
      });
    }

    // Modal de confirmación
    if (cancelBtn) {
      cancelBtn.addEventListener('click', hideConfirmModal);
    }

    if (confirmBtn) {
      confirmBtn.addEventListener('click', () => {
        if (pendingAction) {
          pendingAction();
          hideConfirmModal();
        }
      });
    }

    // Cerrar modal con Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && confirmModal && !confirmModal.classList.contains('hidden')) {
        hideConfirmModal();
      }
    });

    // Cerrar modal clickeando fuera
    if (confirmModal) {
      confirmModal.addEventListener('click', (e) => {
        if (e.target === confirmModal) {
          hideConfirmModal();
        }
      });
    }
  };

  // Función de inicialización principal
  function initializeAdmin() {
    // Obtener elementos DOM al inicializar
    getDOMElements();

    // Inicializar cuando el usuario esté autenticado
    onAuthStateChanged(auth, (user) => {
      if (user) {
        // Verificar que los elementos de loading existan antes de ocultarlos
        setTimeout(() => {
          getDOMElements(); // Volver a obtener elementos para asegurar que estén disponibles
          
          console.log('🎭 Estado de elementos de UI:', {
            loadingElement: !!loadingElement,
            contentContainer: !!contentContainer,
            loadingHidden: loadingElement ? loadingElement.classList.contains('hidden') : 'N/A',
            contentVisible: contentContainer ? !contentContainer.classList.contains('hidden') : 'N/A'
          });
          
          if (loadingElement) {
            loadingElement.classList.add("hidden");
            console.log('✅ Loading ocultado');
          }
          if (contentContainer) {
            contentContainer.classList.remove("hidden");
            console.log('✅ Content container mostrado');
          }

          loadData();
        }, 100); // Pequeño delay para asegurar que el DOM esté listo
      }
    });
  }

  // Cargar servicios cuando la página se cargue
  document.addEventListener('DOMContentLoaded', loadServices);
</script> 