---
import MainLayout from '@/layouts/MainLayout.astro';
import AdminProtection from '@/components/AdminProtection';

export const prerender = false;

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/admin/articles');
}
---

<MainLayout title="Editar Artículo | Reino Da Mata">
  <AdminProtection client:load>
    <div class="max-w-6xl mx-auto w-full px-4 sm:px-6 lg:px-8 py-4 sm:py-8">
      <div class="mb-6 flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-green-700 mb-2">Editar Artículo</h1>
          <p class="text-gray-200">Modifica y actualiza el contenido del artículo.</p>
        </div>
        <a href="/admin/articles" class="text-green-400 hover:text-green-300 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
          </svg>
          <span>Volver a artículos</span>
        </a>
      </div>

      <div id="admin-container" class="relative">
        <!-- Estado de carga inicial -->
        <div id="loading" class="flex justify-center items-center py-20">
          <div class="text-center">
            <svg class="animate-spin h-12 w-12 text-green-500 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="text-green-300 text-lg">Cargando artículo...</p>
            <p class="text-gray-400 text-sm mt-2">Obteniendo datos desde Firebase</p>
          </div>
        </div>

        <!-- Formulario para editar artículo -->
        <div id="article-form-container" class="hidden">
          <!-- Barra de estado del editor -->
          <div class="mb-4 bg-green-900/30 border border-green-600/30 rounded-lg backdrop-blur-sm overflow-hidden">
            <div class="flex items-center justify-between p-3">
              <!-- Estado de conexión -->
              <div class="flex items-center space-x-3">
                <div class="flex items-center space-x-2">
                  <div id="connection-indicator" class="w-3 h-3 rounded-full bg-green-400"></div>
                  <span id="connection-status" class="text-sm text-green-300 font-medium">En línea</span>
                </div>
                <div class="w-px h-4 bg-green-600/50"></div>
                <div id="firebase-status" class="flex items-center space-x-2">
                  <div id="firebase-indicator" class="w-2 h-2 rounded-full bg-green-400"></div>
                  <span id="firebase-text" class="text-xs text-gray-300">Firebase conectado</span>
                </div>
              </div>
              
              <!-- Estado de autoguardado -->
              <div id="autosave-status" class="flex items-center space-x-2">
                <svg id="autosave-icon" class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                <span id="autosave-text" class="text-sm text-gray-300">Listo para editar</span>
                <span id="last-saved" class="text-xs text-gray-500"></span>
              </div>
            </div>
          </div>

          <!-- Información del artículo -->
          <div class="bg-green-900/30 p-4 rounded-lg backdrop-blur-sm mb-6">
            <div class="flex items-center justify-between">
              <div class="flex items-center space-x-4">
                <div class="flex items-center text-sm text-gray-300">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>Creado: <span id="created-date">-</span></span>
                </div>
                <div class="flex items-center text-sm text-gray-300">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  <span>Última actualización: <span id="updated-date">-</span></span>
                </div>
              </div>
              <div class="flex items-center space-x-2">
                <span id="status-badge" class="px-2 py-1 text-xs font-medium rounded-full">-</span>
                <span id="last-saved" class="hidden text-xs text-gray-400">
                  Guardado: <span id="save-time"></span>
                </span>
              </div>
            </div>
          </div>

          <div class="bg-green-900/30 p-4 sm:p-6 rounded-lg backdrop-blur-sm">
            <form id="article-form" class="space-y-4 sm:space-y-6">
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                <!-- Título -->
                <div class="col-span-1">
                  <label for="title" class="block text-white text-sm font-medium mb-2">
                    Título <span class="text-red-400">*</span>
                  </label>
                  <input
                    id="title"
                    type="text"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all duration-200"
                    required
                  />
                  <div id="title-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>

                <!-- Slug -->
                <div class="col-span-1">
                  <label for="slug" class="block text-white text-sm font-medium mb-2">
                    Slug <span class="text-red-400">*</span>
                    <span class="text-xs text-gray-400 font-normal ml-2">(URL amigable)</span>
                  </label>
                  <input
                    id="slug"
                    type="text"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all duration-200"
                    required
                  />
                  <div id="slug-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>

                <!-- Autor -->
                <div class="col-span-1">
                  <label for="author" class="block text-white text-sm font-medium mb-2">
                    Autor <span class="text-red-400">*</span>
                  </label>
                  <input
                    id="author"
                    type="text"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all duration-200"
                    required
                  />
                  <div id="author-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>

                <!-- Imagen destacada -->
                <div class="col-span-1">
                  <label class="block text-white text-sm font-medium mb-2">
                    Imagen destacada
                  </label>
                  <div id="image-uploader-container" class="space-y-3">
                    <!-- Vista previa de imagen actual -->
                    <div id="current-image-preview" class="hidden">
                      <img id="current-image" src="" alt="Imagen actual" 
                           class="w-full max-w-sm h-32 object-cover rounded-lg border border-green-600/50" />
                      <p class="text-xs text-gray-400 mt-1">Imagen actual</p>
                    </div>
                    
                    <!-- Input para nueva imagen -->
                    <div class="space-y-2">
                      <input type="url" id="image-url-input" 
                             placeholder="https://ejemplo.com/imagen.jpg"
                             class="w-full px-3 py-2 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white text-sm transition-all duration-200" />
                      <div class="flex flex-wrap gap-2">
                        <button type="button" id="load-image-btn" 
                                class="flex-1 sm:flex-none px-3 py-1.5 bg-green-600 hover:bg-green-500 text-white text-xs rounded transition-colors">
                          Cargar imagen
                        </button>
                        <button type="button" id="remove-image-btn" 
                                class="flex-1 sm:flex-none px-3 py-1.5 bg-red-600 hover:bg-red-500 text-white text-xs rounded transition-colors hidden">
                          Quitar
                        </button>
                      </div>
                    </div>
                    {/* Fallback: ImageUploader se renderizará aquí si React está disponible */}
                  </div>
                  <div id="image-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>

                <!-- Descripción -->
                <div class="col-span-1 lg:col-span-2">
                  <label for="excerpt" class="block text-white text-sm font-medium mb-2">
                    Descripción breve <span class="text-red-400">*</span>
                    <span class="text-xs text-gray-400 font-normal ml-2">
                      (<span id="char-count">0</span>/160 caracteres)
                    </span>
                  </label>
                  <textarea
                    id="excerpt"
                    rows="3"
                    maxlength="160"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all duration-200"
                    required
                  ></textarea>
                  <div id="excerpt-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>

                <!-- Etiquetas -->
                <div class="col-span-1 lg:col-span-2">
                  <label class="block text-white text-sm font-medium mb-2">
                    Etiquetas
                  </label>
                  <div id="tags-input-react-container" class="col-span-2 space-y-2">
                    {/* TagsInput se renderizará aquí */}
                  </div>
                </div>

                <!-- Categoría -->
                <div class="col-span-1">
                  <label for="category" class="block text-white text-sm font-medium mb-2">
                    Categoría
                  </label>
                  <select
                    id="category"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all duration-200"
                  >
                    <option value="">Seleccionar categoría</option>
                    <option value="espiritualidad">Espiritualidad</option>
                    <option value="meditacion">Meditación</option>
                    <option value="crecimiento-personal">Crecimiento Personal</option>
                    <option value="mindfulness">Mindfulness</option>
                    <option value="bienestar">Bienestar</option>
                    <option value="umbanda">Umbanda</option>
                    <option value="rituales">Rituales</option>
                  </select>
                </div>

                <!-- Opciones -->
                <div class="col-span-1">
                  <label class="block text-white text-sm font-medium mb-2">Opciones</label>
                  <div class="grid grid-cols-1 sm:grid-cols-3 lg:grid-cols-1 gap-3">
                    <div class="flex items-center">
                      <input
                        id="published"
                        type="checkbox"
                        class="w-5 h-5 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                      />
                      <label for="published" class="ml-2 text-white text-sm font-medium">
                        Artículo publicado
                      </label>
                    </div>
                    <div class="flex items-center">
                      <input
                        id="featured"
                        type="checkbox"
                        class="w-5 h-5 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                      />
                      <label for="featured" class="ml-2 text-white text-sm font-medium">
                        Artículo destacado
                      </label>
                    </div>
                    <div class="flex items-center">
                      <input
                        id="commentsEnabled"
                        type="checkbox"
                        class="w-5 h-5 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                      />
                      <label for="commentsEnabled" class="ml-2 text-white text-sm font-medium">
                        Permitir comentarios
                      </label>
                    </div>
                  </div>
                </div>

                <!-- Editor de contenido -->
                <div class="col-span-1 lg:col-span-2">
                  <label class="block text-white text-sm font-medium mb-2">
                    Contenido <span class="text-red-400">*</span>
                  </label>
                  <div id="rich-text-editor-container" class="col-span-2 relative">
                    <!-- Toolbar del editor -->
                    <div id="editor-toolbar" class="flex flex-wrap items-center gap-1 p-2 sm:p-3 bg-green-800/30 border border-green-600/50 rounded-t-lg">
                      <!-- Grupo de formato básico -->
                      <div class="flex items-center space-x-1">
                        <button type="button" id="bold-btn" class="p-1.5 sm:p-2 hover:bg-green-700/50 rounded text-green-300 hover:text-white transition-colors" title="Negrita (Ctrl+B)">
                          <svg class="w-3.5 h-3.5 sm:w-4 sm:h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M3 4a1 1 0 011-1h6a4 4 0 014 4v.1a4.1 4.1 0 01-2.2 3.6A4 4 0 0114 15v.1a4 4 0 01-4 4H4a1 1 0 01-1-1V4zm3 2v3h4a2 2 0 000-4H6zm0 5v3h5a2 2 0 000-4H6z"/>
                          </svg>
                        </button>
                        <button type="button" id="italic-btn" class="p-1.5 sm:p-2 hover:bg-green-700/50 rounded text-green-300 hover:text-white transition-colors" title="Cursiva (Ctrl+I)">
                          <svg class="w-3.5 h-3.5 sm:w-4 sm:h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M7 3a1 1 0 000 2h2l-2 12H5a1 1 0 100 2h6a1 1 0 100-2h-2l2-12h2a1 1 0 100-2H7z"/>
                          </svg>
                        </button>
                        <button type="button" id="link-btn" class="p-1.5 sm:p-2 hover:bg-green-700/50 rounded text-green-300 hover:text-white transition-colors" title="Enlace (Ctrl+K)">
                          <svg class="w-3.5 h-3.5 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
                          </svg>
                        </button>
                      </div>
                      
                      <div class="w-px h-4 sm:h-6 bg-green-600/50 hidden sm:block"></div>
                      
                      <!-- Grupo de estructura -->
                      <div class="flex items-center space-x-1">
                        <button type="button" id="list-btn" class="p-1.5 sm:p-2 hover:bg-green-700/50 rounded text-green-300 hover:text-white transition-colors" title="Lista">
                          <svg class="w-3.5 h-3.5 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"/>
                          </svg>
                        </button>
                        <button type="button" id="heading-btn" class="p-1.5 sm:p-2 hover:bg-green-700/50 rounded text-green-300 hover:text-white transition-colors" title="Título">
                          <svg class="w-3.5 h-3.5 sm:w-4 sm:h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M3 4a1 1 0 011-1h3a1 1 0 011 1v3h4V4a1 1 0 011-1h3a1 1 0 011 1v12a1 1 0 01-1 1h-3a1 1 0 01-1-1v-3H8v3a1 1 0 01-1 1H4a1 1 0 01-1-1V4z"/>
                          </svg>
                        </button>
                      </div>

                      <!-- Contador de palabras -->
                      <div class="flex-1 flex justify-end">
                        <div id="word-counter" class="text-xs text-gray-400 bg-green-900/80 px-2 py-1 rounded whitespace-nowrap">
                          <span class="hidden sm:inline">0 palabras | 0 caracteres</span>
                          <span class="sm:hidden">0p | 0c</span>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Contenedor del editor mejorado -->
                    <div id="editor-content-wrapper" class="relative">
                      <!-- El textarea se creará aquí dinámicamente -->
                    </div>
                  </div>
                  <div id="content-error" class="hidden text-red-400 text-xs mt-1"></div>
                </div>
              </div>

              <!-- Botones de acción -->
              <div class="flex justify-between items-center pt-6 border-t border-green-600/30">
                <div class="flex space-x-3">
                  <button
                    type="button"
                    id="preview-btn"
                    class="px-6 py-3 bg-blue-600 hover:bg-blue-500 text-white font-medium rounded-lg shadow-md transition-all duration-200 flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                    Vista previa
                  </button>
                  <button
                    type="button"
                    id="save-draft-btn"
                    class="px-6 py-3 bg-gray-600 hover:bg-gray-500 text-white font-medium rounded-lg shadow-md transition-all duration-200 flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    Guardar borrador
                  </button>
                </div>
                <div class="flex space-x-3">
                  <a
                    href="/admin/articles"
                    class="px-6 py-3 bg-gray-500 hover:bg-gray-400 text-white font-medium rounded-lg shadow-md transition-all duration-200"
                  >
                    Cancelar
                  </a>
                  <button
                    type="submit"
                    id="submit-btn"
                    class="px-8 py-3 bg-green-600 hover:bg-green-500 text-white font-medium rounded-lg shadow-md transition-all duration-200 flex items-center"
                  >
                    <span>Actualizar artículo</span>
                  </button>
                </div>
              </div>
            </form>
          </div>

          <!-- Mensajes de estado -->
          <div id="success-message" class="hidden bg-green-600/80 text-white p-4 rounded-lg mt-6">
            <div class="flex items-center">
              <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <p class="font-medium">¡Artículo actualizado con éxito!</p>
            </div>
            <div class="flex space-x-4 mt-2">
              <a id="view-article-link" href="#" class="text-white underline hover:text-green-200" target="_blank">Ver artículo</a>
              <a href="/admin/articles" class="text-white underline hover:text-green-200">Volver a la lista</a>
            </div>
          </div>

          <div id="error-message" class="hidden bg-red-600/80 text-white p-4 rounded-lg mt-6">
            <div class="flex items-center">
              <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
              </svg>
              <div>
                <p class="font-medium">Error al actualizar el artículo</p>
                <p id="error-details" class="text-sm mt-1"></p>
              </div>
            </div>
          </div>
        </div>

        <!-- Modal de vista previa -->
        <div id="preview-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
          <div class="bg-green-900 p-6 rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-bold text-white">Vista previa del artículo</h3>
              <button id="close-preview" class="text-gray-400 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div id="preview-content" class="prose prose-invert prose-green max-w-none">
              <!-- Se llenará desde JavaScript -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminProtection>
</MainLayout>

<!-- Importar bibliotecas necesarias -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.4/dist/purify.min.js"></script>
<script src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

<!-- Los servicios se exponen desde AdminProtection.tsx -->

<script>
  // Los servicios se acceden desde window.articleServices
  const RichTextEditor = (window as any).RichTextEditor || null;
  const ImageUploader = (window as any).ImageUploader || null;
  const TagsInput = (window as any).TagsInput || null;

  // Variables globales
  let articleId: string;
  let originalData: any = {};
  let currentTags: string[] = [];
  let currentContent: string = ''; // Para el RichTextEditor
  let isFormDirty = false;
  let autosaveTimeout: number | null = null;

  // Elementos del DOM - se obtendrán dinámicamente
  let loadingElement, articleFormContainer, articleForm, autosaveIndicator, autosaveText, lastSaved, saveTime;
  let successMessage, errorMessage, errorDetails, viewArticleLink, previewModal, previewContent, closePreviewBtn;
  let submitBtn, charCount, wordCounter;
  
  // Nuevos elementos para indicadores de estado
  let connectionIndicator, connectionStatus, firebaseIndicator, firebaseText;
  let autosaveStatus, autosaveIcon, lastSavedElement;
  
  // Función para obtener elementos DOM
  function getDOMElements() {
    loadingElement = document.getElementById("loading");
    articleFormContainer = document.getElementById("article-form-container");
    articleForm = document.getElementById("article-form") as HTMLFormElement;
    autosaveIndicator = document.getElementById("autosave-indicator");
    autosaveText = document.getElementById("autosave-text");
    lastSaved = document.getElementById("last-saved");
    saveTime = document.getElementById("save-time");
    successMessage = document.getElementById("success-message");
    errorMessage = document.getElementById("error-message");
    errorDetails = document.getElementById("error-details");
    viewArticleLink = document.getElementById("view-article-link") as HTMLAnchorElement;
    previewModal = document.getElementById("preview-modal");
    previewContent = document.getElementById("preview-content");
    closePreviewBtn = document.getElementById("close-preview");
    submitBtn = document.getElementById("submit-btn") as HTMLButtonElement;
    charCount = document.getElementById("char-count");
    wordCounter = document.getElementById("word-counter");
    
    // Nuevos elementos de estado
    connectionIndicator = document.getElementById("connection-indicator");
    connectionStatus = document.getElementById("connection-status");
    firebaseIndicator = document.getElementById("firebase-indicator");
    firebaseText = document.getElementById("firebase-text");
    autosaveStatus = document.getElementById("autosave-status");
    autosaveIcon = document.getElementById("autosave-icon");
    lastSavedElement = document.getElementById("last-saved");
  }

  // Elementos de formulario - se obtendrán dinámicamente
  let titleInput, slugInput, authorInput, excerptInput, categoryInput, publishedInput, featuredInput, commentsEnabledInput;
  
  // Función para obtener elementos de formulario
  function getFormElements() {
    titleInput = document.getElementById("title") as HTMLInputElement;
    slugInput = document.getElementById("slug") as HTMLInputElement;
    authorInput = document.getElementById("author") as HTMLInputElement;
    excerptInput = document.getElementById("excerpt") as HTMLTextAreaElement;
    categoryInput = document.getElementById("category") as HTMLSelectElement;
    publishedInput = document.getElementById("published") as HTMLInputElement;
    featuredInput = document.getElementById("featured") as HTMLInputElement;
    commentsEnabledInput = document.getElementById("commentsEnabled") as HTMLInputElement;
  }

  // Función para inicializar el editor mejorado
  function initializeEnhancedEditor() {
    const editorContainer = document.getElementById('rich-text-editor-container');
    if (!editorContainer) {
      return;
    }

    // Crear el textarea mejorado
    const textarea = document.createElement('textarea');
    textarea.id = 'content-textarea';
    textarea.className = 'w-full p-4 bg-green-900/30 border border-green-600/50 rounded-b-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500 resize-none transition-all duration-200';
    textarea.placeholder = 'Escribe el contenido del artículo en Markdown...';
    textarea.value = currentContent;
    textarea.style.minHeight = '300px';
    
    // Agregar el textarea después del toolbar
    const toolbar = document.getElementById('editor-toolbar');
    if (toolbar && toolbar.nextSibling) {
      editorContainer.insertBefore(textarea, toolbar.nextSibling);
    } else {
      editorContainer.appendChild(textarea);
    }

    // Configurar auto-resize
    function autoResize() {
      textarea.style.height = 'auto';
      textarea.style.height = Math.max(300, textarea.scrollHeight) + 'px';
    }

    // Configurar eventos del textarea
    textarea.addEventListener('input', (e) => {
      currentContent = textarea.value;
      isFormDirty = true;
      scheduleAutosave();
      updateWordCount();
      updateCharCount();
      autoResize();
    });

    textarea.addEventListener('keydown', (e) => {
      // Atajos de teclado
      if (e.ctrlKey || e.metaKey) {
        switch(e.key) {
          case 'b':
            e.preventDefault();
            insertMarkdown('**', '**', 'texto en negrita');
            break;
          case 'i':
            e.preventDefault();
            insertMarkdown('*', '*', 'texto en cursiva');
            break;
          case 'k':
            e.preventDefault();
            insertMarkdown('[', '](url)', 'texto del enlace');
            break;
        }
      }
      
      // Tab para indentación
      if (e.key === 'Tab') {
        e.preventDefault();
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        textarea.value = textarea.value.substring(0, start) + '  ' + textarea.value.substring(end);
        textarea.selectionStart = textarea.selectionEnd = start + 2;
        currentContent = textarea.value;
        isFormDirty = true;
        scheduleAutosave();
      }
    });

    // Configurar botones del toolbar
    setupToolbarButtons(textarea);
    
    // Configurar resize inicial
    autoResize();
  }

  // Función para configurar los botones del toolbar
  function setupToolbarButtons(textarea: HTMLTextAreaElement) {
    const boldBtn = document.getElementById('bold-btn');
    const italicBtn = document.getElementById('italic-btn');
    const linkBtn = document.getElementById('link-btn');
    const listBtn = document.getElementById('list-btn');
    const headingBtn = document.getElementById('heading-btn');

    boldBtn?.addEventListener('click', () => {
      insertMarkdown('**', '**', 'texto en negrita');
    });

    italicBtn?.addEventListener('click', () => {
      insertMarkdown('*', '*', 'texto en cursiva');
    });

    linkBtn?.addEventListener('click', () => {
      insertMarkdown('[', '](url)', 'texto del enlace');
    });

    listBtn?.addEventListener('click', () => {
      insertMarkdown('- ', '', 'elemento de lista');
    });

    headingBtn?.addEventListener('click', () => {
      insertMarkdown('## ', '', 'Título');
    });
  }

  // Función auxiliar para insertar markdown
  function insertMarkdown(before: string, after: string, placeholder: string) {
    const textarea = document.getElementById('content-textarea') as HTMLTextAreaElement;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = textarea.value.substring(start, end);
    const replacementText = selectedText || placeholder;
    const newText = before + replacementText + after;
    
    textarea.value = textarea.value.substring(0, start) + newText + textarea.value.substring(end);
    
    // Posicionar cursor
    if (selectedText) {
      textarea.selectionStart = start;
      textarea.selectionEnd = start + newText.length;
    } else {
      textarea.selectionStart = start + before.length;
      textarea.selectionEnd = start + before.length + placeholder.length;
    }
    
    textarea.focus();
    currentContent = textarea.value;
    isFormDirty = true;
    scheduleAutosave();
    updateWordCount();
    updateCharCount();
  }

  // Obtener ID del artículo
  const pathParts = window.location.pathname.split('/');
  articleId = pathParts[pathParts.length - 1];

  // === FUNCIONES DE ESTADO ===
  
  // Actualizar estado de conexión
  function updateConnectionStatus() {
    const isOnline = navigator.onLine;
    
    if (connectionIndicator && connectionStatus) {
      if (isOnline) {
        connectionIndicator.className = "w-3 h-3 rounded-full bg-green-400";
        connectionStatus.textContent = "En línea";
        connectionStatus.className = "text-sm text-green-300 font-medium";
      } else {
        connectionIndicator.className = "w-3 h-3 rounded-full bg-yellow-500";
        connectionStatus.textContent = "Sin conexión";
        connectionStatus.className = "text-sm text-yellow-300 font-medium";
      }
    }
  }

  // Actualizar estado de Firebase
  function updateFirebaseStatus(isConnected: boolean, message: string = '') {
    if (firebaseIndicator && firebaseText) {
      if (isConnected) {
        firebaseIndicator.className = "w-2 h-2 rounded-full bg-green-400";
        firebaseText.textContent = message || "Firebase conectado";
        firebaseText.className = "text-xs text-green-300";
      } else {
        firebaseIndicator.className = "w-2 h-2 rounded-full bg-red-500";
        firebaseText.textContent = message || "Firebase desconectado";
        firebaseText.className = "text-xs text-red-300";
      }
    }
  }

  // Actualizar estado de autoguardado
  function updateAutosaveStatus(status: 'idle' | 'saving' | 'saved' | 'error', message?: string) {
    if (!autosaveIcon || !autosaveText) return;

    const now = new Date();
    const timeString = now.toLocaleTimeString('es-ES', { 
      hour: '2-digit', 
      minute: '2-digit',
      second: '2-digit'
    });

    switch (status) {
      case 'saving':
        autosaveIcon.innerHTML = `
          <svg class="animate-spin h-4 w-4 text-blue-400" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>`;
        autosaveText.textContent = "Guardando...";
        autosaveText.className = "text-sm text-blue-300";
        if (lastSavedElement) lastSavedElement.textContent = "";
        break;

      case 'saved':
        autosaveIcon.innerHTML = `
          <svg class="h-4 w-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>`;
        autosaveText.textContent = "Guardado";
        autosaveText.className = "text-sm text-green-300";
        if (lastSavedElement) lastSavedElement.textContent = `a las ${timeString}`;
        break;

      case 'error':
        autosaveIcon.innerHTML = `
          <svg class="h-4 w-4 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>`;
        autosaveText.textContent = message || "Error al guardar";
        autosaveText.className = "text-sm text-red-300";
        if (lastSavedElement) lastSavedElement.textContent = `a las ${timeString}`;
        break;

      default: // idle
        autosaveIcon.innerHTML = `
          <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
          </svg>`;
        autosaveText.textContent = "Listo para editar";
        autosaveText.className = "text-sm text-gray-300";
        break;
    }
  }

  // Eventos de conexión
  window.addEventListener('online', updateConnectionStatus);
  window.addEventListener('offline', updateConnectionStatus);

  // Funciones de utilidad
  function showError(message: string) {
    if (errorMessage && errorDetails) {
      errorDetails.textContent = message;
      errorMessage.classList.remove('hidden');
      setTimeout(() => {
        errorMessage.classList.add('hidden');
      }, 5000);
    }
  }

  function showSuccess(message: string) {
    if (successMessage) {
      successMessage.querySelector('p')!.textContent = message;
      successMessage.classList.remove('hidden');
      setTimeout(() => {
        successMessage.classList.add('hidden');
      }, 5000);
    }
  }

  function generateSlug(title: string): string {
    return title
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-z0-9\s-]/g, '')
      .trim()
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-');
  }

  function updateCharCount() {
    if (charCount && excerptInput) {
      const count = excerptInput.value.length;
      charCount.textContent = count.toString();
      charCount.className = count > 140 ? 'text-yellow-400' : count > 160 ? 'text-red-400' : 'text-gray-400';
    }
  }

  function updateWordCount() { // Ahora usa currentContent
    if (wordCounter) {
      // Simple split for word count, might need refinement if currentContent is HTML
      const textContent = currentContent.replace(/<[^>]+>/g, ' '); // Basic strip HTML for word count
      const words = textContent.split(/\s+/).filter(w => w.length > 0).length;
      const chars = currentContent.length;
      
      // Actualizar versión completa (desktop)
      const fullText = wordCounter.querySelector('.hidden.sm\\:inline');
      if (fullText) {
        fullText.textContent = `${words} palabras | ${chars} caracteres`;
      }
      
      // Actualizar versión compacta (móvil)
      const shortText = wordCounter.querySelector('.sm\\:hidden');
      if (shortText) {
        shortText.textContent = `${words}p | ${chars}c`;
      }
      
      // Fallback si no hay elementos específicos
      if (!fullText && !shortText) {
        wordCounter.textContent = `${words} palabras | ${chars} caracteres`;
      }
    }
  }

  // Manejador para cambios en RichTextEditor
  function handleContentChange(newContent: string) {
    currentContent = newContent;
    isFormDirty = true;
    scheduleAutosave();
    updateWordCount(); // Actualizar contador de palabras
  }

  function handleImageChange(newUrl: string) {
    originalData.image = newUrl; // Usar 'image' según el modelo Article
    isFormDirty = true;
    scheduleAutosave();
    
    // Actualizar vista previa
    updateImagePreview(newUrl);
    
    // Limpiar errores
    const imageErrorDiv = document.getElementById('image-error');
    if (imageErrorDiv) {
      imageErrorDiv.classList.add('hidden');
      imageErrorDiv.textContent = '';
    }
  }

  // Función para actualizar la vista previa de imagen
  function updateImagePreview(imageUrl: string) {
    const preview = document.getElementById('current-image-preview');
    const imageElement = document.getElementById('current-image') as HTMLImageElement;
    const removeBtn = document.getElementById('remove-image-btn');
    
    if (imageUrl && imageUrl.trim()) {
      if (imageElement) {
        imageElement.src = imageUrl;
        imageElement.onerror = () => {
          showImageError('Error al cargar la imagen. Verifica la URL.');
        };
      }
      preview?.classList.remove('hidden');
      removeBtn?.classList.remove('hidden');
    } else {
      preview?.classList.add('hidden');
      removeBtn?.classList.add('hidden');
    }
  }

  // Función para mostrar errores de imagen
  function showImageError(message: string) {
    const imageErrorDiv = document.getElementById('image-error');
    if (imageErrorDiv) {
      imageErrorDiv.classList.remove('hidden');
      imageErrorDiv.textContent = message;
    }
  }

  // Función para configurar el manejo de imágenes
  function setupImageHandlers() {
    const imageUrlInput = document.getElementById('image-url-input') as HTMLInputElement;
    const loadImageBtn = document.getElementById('load-image-btn');
    const removeImageBtn = document.getElementById('remove-image-btn');
    
    if (loadImageBtn) {
      loadImageBtn.addEventListener('click', () => {
        const url = imageUrlInput?.value?.trim();
        if (url) {
          // Validar que sea una URL válida
          try {
            new URL(url);
            handleImageChange(url);
          } catch {
            showImageError('Por favor, ingresa una URL válida');
          }
        } else {
          showImageError('Por favor, ingresa una URL de imagen');
        }
      });
    }
    
    if (removeImageBtn) {
      removeImageBtn.addEventListener('click', () => {
        handleImageChange('');
        if (imageUrlInput) imageUrlInput.value = '';
      });
    }
    
    // Permitir cargar imagen con Enter
    if (imageUrlInput) {
      imageUrlInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          loadImageBtn?.click();
        }
      });
    }
  }

  function handleImageError(errorMsg: string) {
    const imageErrorDiv = document.getElementById('image-error');
    if (imageErrorDiv) {
      imageErrorDiv.textContent = errorMsg;
      imageErrorDiv.classList.remove('hidden');
    }
  }

  function showAutosaveIndicator(text: string = "Guardando cambios...") {
    if (autosaveIndicator && autosaveText) {
      autosaveText.textContent = text;
      autosaveIndicator.classList.remove('hidden');
    }
  }

  function hideAutosaveIndicator() {
    if (autosaveIndicator) {
      setTimeout(() => {
        autosaveIndicator.classList.add('hidden');
      }, 2000);
    }
  }

  function updateLastSaved() {
    if (lastSaved && saveTime) {
      const now = new Date();
      saveTime.textContent = now.toLocaleTimeString();
      lastSaved.classList.remove('hidden');
    }
  }

  // Gestión de etiquetas (eliminada, ahora manejada por TagsInput.tsx)
  // function addTag(tag: string) { ... }
  // function removeTag(tag: string) { ... }
  // function renderTags() { ... }

  function handleTagsChange(newTags: string[]) {
    currentTags = newTags;
    isFormDirty = true;
    scheduleAutosave();
  }

  // Autoguardado
  async function saveDraft() {
    if (!isFormDirty) return;
    
    // Verificar que la función updateArticle esté disponible
    if (!window.articleServices || !window.articleServices.updateArticle) {
      updateAutosaveStatus('error', 'Servicio no disponible');
      return;
    }
    
    // Mostrar estado de guardando
    updateAutosaveStatus('saving');
    
    try {
      const updateData = {
        title: titleInput.value,
        slug: slugInput.value,
        author: authorInput.value,
        description: excerptInput.value,
        content: currentContent,
        image: originalData.image || originalData.featuredImage || '',
        tags: currentTags,
        draft: !publishedInput.checked,
        featured: featuredInput.checked,
        commentsEnabled: commentsEnabledInput.checked
      };

      await window.articleServices.updateArticle(articleId, updateData);
      
      // Mostrar estado de guardado exitoso
      updateAutosaveStatus('saved');
      updateFirebaseStatus(true, "Sincronizado");
      isFormDirty = false;
    } catch (error) {
      
      // Mostrar estado de error según el tipo
      if (error instanceof Error && error.message.includes('offline')) {
        updateAutosaveStatus('error', 'Sin conexión');
        updateFirebaseStatus(false, "Modo offline");
      } else {
        updateAutosaveStatus('error', 'Error al guardar');
        updateFirebaseStatus(false, "Error de conexión");
      }
    }
  }

  function scheduleAutosave() {
    if (autosaveTimeout) clearTimeout(autosaveTimeout);
    
    // Mostrar que se va a guardar pronto
    updateAutosaveStatus('idle', 'Cambios pendientes');
    
    autosaveTimeout = window.setTimeout(() => saveDraft(), 3000);
  }

  // Función de validación de slug usando el servicio unificado
  async function validateSlug(slug) {
    try {
      return await window.articleServices.checkSlugExists(slug);
    } catch (error) {
      return false;
    }
  }

  // Cargar artículo
  async function loadArticle() {
    try {
      // Usar servicios desde window
      const article = await window.articleServices.getArticleById(articleId);

      if (article) {
        originalData = article;
        
        // Asegurar que los elementos del formulario existan
        getFormElements();
        
        // Llenar formulario con verificaciones
        if (titleInput) titleInput.value = article.title || '';
        if (slugInput) slugInput.value = article.slug || '';
        if (authorInput) authorInput.value = article.author || '';
        if (excerptInput) excerptInput.value = article.description || '';
        currentContent = article.content || ''; // Cargar a currentContent
        originalData.image = article.image || ''; // Cargar a originalData
        
        // Configurar imagen destacada
        const imageUrlInput = document.getElementById('image-url-input') as HTMLInputElement;
        if (imageUrlInput && originalData.image) {
          imageUrlInput.value = originalData.image;
        }
        updateImagePreview(originalData.image);
        if (featuredInput) featuredInput.checked = article.featured || false;
        if (publishedInput) publishedInput.checked = !article.draft || false;
        if (commentsEnabledInput) commentsEnabledInput.checked = article.commentsEnabled !== false;
        
        // Cargar etiquetas
        currentTags = article.tags || [];

        // Renderizar TagsInput
        const tagsContainer = document.getElementById('tags-input-react-container');
        if (tagsContainer && (window as any).React && (window as any).ReactDOM && (window as any).TagsInput) {
          try {
            const tagsElement = (window as any).React.createElement((window as any).TagsInput, {
              value: currentTags,
              onChange: handleTagsChange,
              placeholder: "Añade etiquetas (ej: umbanda, fe, historia)"
            });
            
            // Usar render si está disponible, sino usar la API antigua
            if ((window as any).ReactDOM.render) {
              (window as any).ReactDOM.render(tagsElement, tagsContainer);
            } else if ((window as any).ReactDOM.createRoot) {
              const root = (window as any).ReactDOM.createRoot(tagsContainer);
              root.render(tagsElement);
            }
          } catch (error) {
            // Continuar con fallback
          }
        } else {
          // Fallback a un input de texto simple si el componente React no carga
          const fallbackTagsInput = document.createElement('input');
          fallbackTagsInput.type = 'text';
          fallbackTagsInput.className = 'w-full px-4 py-2 bg-red-900/50 border border-red-700 text-white';
          fallbackTagsInput.placeholder = 'Error al cargar TagsInput. Ingrese etiquetas separadas por comas.';
          fallbackTagsInput.value = currentTags.join(', ');
          fallbackTagsInput.oninput = (e) => {
            currentTags = (e.target as HTMLInputElement).value.split(',').map(t => t.trim()).filter(t => t);
            isFormDirty = true;
            scheduleAutosave();
          };
          if (tagsContainer) tagsContainer.appendChild(fallbackTagsInput);
        }
        
        // Actualizar contadores
        updateCharCount();
        updateWordCount(); // Se llamará con currentContent

        // Inicializar editor mejorado
        initializeEnhancedEditor();

        // ImageUploader ya está implementado en HTML con funcionalidad nativa
        // No necesita configuración adicional, los eventos ya están configurados en setupImageHandlers()
        
        // Actualizar información del artículo
        const createdDate = document.getElementById('created-date');
        const updatedDate = document.getElementById('updated-date');
        const statusBadge = document.getElementById('status-badge');
        
        if (createdDate && article.publishDate) {
          createdDate.textContent = new Date(article.publishDate.toDate()).toLocaleDateString();
        }
        
        if (updatedDate && article.updatedAt) {
          updatedDate.textContent = new Date(article.updatedAt.toDate()).toLocaleDateString();
        }
        
        if (statusBadge) {
          if (!article.draft) {
            statusBadge.textContent = 'Publicado';
            statusBadge.className = 'px-2 py-1 text-xs font-medium rounded-full bg-green-600 text-white';
          } else {
            statusBadge.textContent = 'Borrador';
            statusBadge.className = 'px-2 py-1 text-xs font-medium rounded-full bg-yellow-600 text-white';
          }
        }

        // Formulario ya está mostrado por showForm()
        
        // Inicializar estados de los indicadores
        updateConnectionStatus();
        updateFirebaseStatus(true, "Datos cargados");
        updateAutosaveStatus('idle');
      } else {
        showError('Artículo no encontrado');
        setTimeout(() => {
          window.location.href = '/admin/articles';
        }, 2000);
      }
    } catch (error) {
      
      // Actualizar estado de Firebase según el tipo de error
      if (error instanceof Error && error.message.includes('offline')) {
        updateFirebaseStatus(false, "Modo offline");
        updateAutosaveStatus('error', 'Sin conexión a Firebase');
      } else {
        updateFirebaseStatus(false, "Error de conexión");
        updateAutosaveStatus('error', 'Error al cargar datos');
      }
      
      showError('Error al cargar el artículo: ' + (error instanceof Error ? error.message : 'Error desconocido'));
    }
  }

  // Manejar envío del formulario
  async function handleSubmit(e: Event) {
    e.preventDefault();
    
    // Verificar que los servicios estén disponibles
    if (!window.articleServices || !window.articleServices.updateArticle) {
      showError('Los servicios no están disponibles. Recarga la página.');
      return;
    }
    
    // Validaciones básicas
    if (!titleInput.value.trim() || !currentContent.trim()) { // Usar currentContent
      showError('El título y el contenido son requeridos');
      return;
    }
    
    // Verificar slug duplicado
    if (slugInput.value !== originalData.slug) {
      const slugExists = await window.articleServices.checkSlugExists(slugInput.value);
      if (slugExists) {
        showError('El slug ya existe. Por favor, elige otro.');
        return;
      }
    }
    
    // Mostrar estado de carga
    submitBtn.disabled = true;
    submitBtn.innerHTML = `
      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <span>Actualizando...</span>
    `;
    
    try {
      const updateData = {
        title: titleInput.value.trim(),
        slug: slugInput.value.trim(),
        author: authorInput.value.trim(),
        description: excerptInput.value.trim(),
        content: currentContent.trim(),
        image: originalData.image.trim(),
        tags: currentTags,
        draft: !publishedInput.checked,
        featured: featuredInput.checked,
        commentsEnabled: commentsEnabledInput.checked
      };

      await window.articleServices.updateArticle(articleId, updateData);
      
      // Actualizar enlace de vista
      if (viewArticleLink) {
        viewArticleLink.href = `/blog/${updateData.slug}`;
      }
      
      showSuccess('¡Artículo actualizado con éxito!');
      isFormDirty = false;
      
    } catch (error) {
      showError('Error al actualizar el artículo: ' + (error instanceof Error ? error.message : 'Error desconocido'));
    } finally {
      // Restaurar botón
      submitBtn.disabled = false;
      submitBtn.innerHTML = '<span>Actualizar artículo</span>';
    }
  }

  // Mostrar vista previa
  function showPreview() {
    if (!previewContent || !previewModal) return;
    
    try {
      const title = titleInput.value || "Sin título";
      const author = authorInput.value || "Sin autor";
      const excerpt = excerptInput.value || "Sin descripción";
      const content = currentContent || "*No hay contenido para mostrar*"; // Usar currentContent
      const image = originalData.featuredImage;
      
      // Verificar que marked y DOMPurify estén disponibles
      if (typeof window !== 'undefined' && (window as any).marked && (window as any).DOMPurify) {
        const htmlContent = (window as any).DOMPurify.sanitize((window as any).marked.parse(content));
        
        let previewHtml = `
          <div class="mb-6">
            <h1 class="text-3xl font-bold text-white mb-2">${title}</h1>
            <p class="text-gray-300 mb-4">Por ${author}</p>
            <p class="text-gray-400 italic">${excerpt}</p>
          </div>
        `;
        
        if (image) {
          previewHtml += `
            <div class="mb-6">
              <img src="${image}" alt="${title}" class="w-full h-64 object-cover rounded-lg" />
            </div>
          `;
        }
        
        previewHtml += `<div class="prose prose-invert prose-green max-w-none">${htmlContent}</div>`;
        
        previewContent.innerHTML = previewHtml;
        previewModal.classList.remove("hidden");
      } else {
        alert("Las librerías de vista previa no están disponibles.");
      }
    } catch (error) {
      alert("Error al generar la vista previa.");
    }
  }

  // Configurar eventos
  let setupRetries = 0;
  function setupEventListeners() {
    // Obtener elementos DOM
    getDOMElements();
    getFormElements();
    
    // Verificar que los elementos existan antes de agregar event listeners
    if (!articleForm) {
      setupRetries++;
      if (setupRetries < 50) { // Máximo 50 reintentos (5 segundos)
        setTimeout(setupEventListeners, 100);
      } else {
        // No se pudo encontrar articleForm después de 50 intentos
      }
      return;
    }
    
    // Formulario
    articleForm.addEventListener("submit", handleSubmit);
    
    // Campos de entrada
    titleInput.addEventListener('input', () => {
      isFormDirty = true;
      scheduleAutosave();
    });
    
    slugInput.addEventListener('input', () => {
      slugInput.value = generateSlug(slugInput.value);
      isFormDirty = true;
      scheduleAutosave();
    });
    
    authorInput.addEventListener('input', () => {
      isFormDirty = true;
      scheduleAutosave();
    });
    
    excerptInput.addEventListener('input', () => {
      updateCharCount();
      isFormDirty = true;
      scheduleAutosave();
    });
    
    // El listener para contentInput se elimina, RichTextEditor usa su propio onChange.
    // El updateWordCount y scheduleAutosave se llaman desde handleContentChange.
    
    // Configurar manejadores de imagen
    setupImageHandlers();
    
    categoryInput.addEventListener('change', () => {
      isFormDirty = true;
      scheduleAutosave();
    });
    
    [publishedInput, featuredInput, commentsEnabledInput].forEach(checkbox => {
      checkbox.addEventListener('change', () => {
        isFormDirty = true;
        scheduleAutosave();
      });
    });
    
    // Auto-generar slug
    titleInput.addEventListener('input', () => {
      if (!slugInput.value || slugInput.value === generateSlug(originalData.title || '')) {
        slugInput.value = generateSlug(titleInput.value);
      }
    });
    
    // Etiquetas - Event listener eliminado, ahora manejado por TagsInput.tsx
    // tagsInput.addEventListener('keydown', (e) => { ... });
    
    // Botones
    document.getElementById('preview-btn')?.addEventListener('click', showPreview);
    document.getElementById('save-draft-btn')?.addEventListener('click', () => saveDraft());
    
    // Modal de vista previa
    closePreviewBtn?.addEventListener('click', () => {
      previewModal?.classList.add('hidden');
    });
    
    previewModal?.addEventListener('click', (e) => {
      if (e.target === previewModal) {
        previewModal.classList.add('hidden');
      }
    });
    
    // Cerrar modales con Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && previewModal && !previewModal.classList.contains('hidden')) {
        previewModal.classList.add('hidden');
      }
    });
  }

  // Hacer funciones globales para los botones - removeTag ya no es global
  // (window as any).removeTag = removeTag;

  // Inicializar después de que los servicios estén disponibles Y AdminProtection haya renderizado
  let initRetries = 0;
  function initializeEditor() {
    // Solo proceder si los servicios están disponibles Y AdminProtection ha terminado
    if (window.articleServices && window.articleServices.getArticleById) {
      
      // Verificar si AdminProtection ha renderizado el contenido
      const loadingElement = document.getElementById("loading");
      const articleFormContainer = document.getElementById("article-form-container");
      
      if (loadingElement && articleFormContainer) {
        
        // Mostrar formulario
        showForm();
        
        // Configurar eventos y cargar datos
        setTimeout(() => {
          setupEventListeners();
          setTimeout(() => {
            loadArticle();
          }, 100);
        }, 100);
        
      } else {
        setTimeout(initializeEditor, 100);
      }
      
    } else {
      initRetries++;
      if (initRetries < 50) { // Máximo 50 reintentos (5 segundos)
        setTimeout(initializeEditor, 100);
      } else {
        // Mostrar error al usuario
        const loadingElement = document.getElementById("loading");
        if (loadingElement) {
          loadingElement.innerHTML = '<div class="text-red-400 text-center"><p>Error: No se pudieron cargar los servicios necesarios.</p><p class="text-sm mt-2">Recarga la página o contacta al administrador.</p></div>';
        }
      }
    }
  }
  
  // Función para mostrar el formulario
  function showForm() {
    getDOMElements();
    
    if (loadingElement) {
      loadingElement.classList.add('hidden');
    }
    
    if (articleFormContainer) {
      articleFormContainer.classList.remove('hidden');
    }
  }
  
  initializeEditor();

  // Limpiar timeout al salir
  window.addEventListener('beforeunload', () => {
    if (autosaveTimeout) clearTimeout(autosaveTimeout);
    if (isFormDirty) {
      saveDraft();
    }
  });
</script>

<style>
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Estilos del editor de texto */
  #rich-text-editor-container textarea,
  #content-textarea {
    font-family: 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;
    line-height: 1.6;
    min-height: 300px;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    #content-textarea {
      min-height: 250px;
      font-size: 14px;
    }
    
    #editor-toolbar {
      padding: 8px;
    }
    
    #editor-toolbar button {
      padding: 6px;
    }
  }

  /* Image preview styles */
  #current-image {
    transition: transform 0.2s ease;
  }
  
  #current-image:hover {
    transform: scale(1.02);
  }

  /* Form responsive improvements */
  @media (max-width: 1024px) {
    .grid.grid-cols-1.lg\\:grid-cols-2 {
      grid-template-columns: 1fr;
    }
  }

  /* Estilos para las etiquetas */
  #tags-display .tag-item {
    transition: all 0.2s ease;
  }

  #tags-display .tag-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  /* Animaciones suaves */
  .transition-all {
    transition: all 0.2s ease;
  }

  /* Mejoras visuales para inputs */
  input:focus, textarea:focus, select:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(34, 197, 94, 0.2);
  }
</style>
