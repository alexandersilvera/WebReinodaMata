---
import MainLayout from "@/layouts/MainLayout.astro";
import AdminProtection from "@/components/AdminProtection";
---

<MainLayout title="Nuevo Artículo | Reino Da Mata">
  <AdminProtection client:load>
    <div class="max-w-6xl mx-auto w-full px-4 py-8">
      <div class="mb-6 flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-green-700 mb-2">Crear Nuevo Artículo</h1>
          <p class="text-gray-200">Escribe y publica un nuevo artículo en el blog.</p>
        </div>
        <a href="/admin/articles" class="text-green-400 hover:text-green-300 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
          </svg>
          <span>Volver a artículos</span>
        </a>
      </div>

      <div id="admin-container" class="relative">
        <!-- Estado de carga inicial -->
        <div id="loading" class="flex justify-center items-center py-10">
          <svg class="animate-spin h-10 w-10 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span class="ml-3 text-green-300">Cargando...</span>
        </div>

        <!-- Formulario para crear artículo -->
        <div id="article-form-container" class="hidden bg-green-900/30 p-6 rounded-lg backdrop-blur-sm">
          <!-- Indicador de autoguardado -->
          <div id="autosave-indicator" class="hidden mb-4 p-2 bg-blue-600/20 border border-blue-500/30 rounded-md">
            <div class="flex items-center text-blue-300 text-sm">
              <svg class="animate-spin h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span id="autosave-text">Guardando borrador...</span>
            </div>
          </div>

          <form id="article-form" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div class="col-span-1">
                <label for="title" class="block text-white text-sm font-medium mb-2">
                  Título <span class="text-red-400">*</span>
                </label>
                <input
                  id="title"
                  type="text"
                  class="w-full px-4 py-2 bg-green-700/50 border border-green-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-colors"
                  required
                />
                <div id="title-error" class="hidden text-red-400 text-xs mt-1"></div>
              </div>

              <div class="col-span-1">
                <label for="slug" class="block text-white text-sm font-medium mb-2">
                  Slug <span class="text-red-400">*</span>
                  <span class="text-xs text-gray-400 font-normal ml-2">(URL amigable, p.ej.: mi-primer-articulo)</span>
                </label>
                <input
                  id="slug"
                  type="text"
                  class="w-full px-4 py-2 bg-green-700/50 border border-green-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-colors"
                  required
                />
                <div id="slug-error" class="hidden text-red-400 text-xs mt-1"></div>
              </div>

              <div class="col-span-1">
                <label for="author" class="block text-white text-sm font-medium mb-2">
                  Autor <span class="text-red-400">*</span>
                </label>
                <input
                  id="author"
                  type="text"
                  class="w-full px-4 py-2 bg-green-700/50 border border-green-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-colors"
                  required
                />
                <div id="author-error" class="hidden text-red-400 text-xs mt-1"></div>
              </div>

              <!-- Componente ImageUploader integrado -->
              <div class="col-span-1">
                <div id="image-uploader-container"></div>
                <div id="image-error" class="hidden text-red-400 text-xs mt-1"></div>
              </div>

              <div class="col-span-2">
                <label for="description" class="block text-white text-sm font-medium mb-2">
                  Descripción breve <span class="text-red-400">*</span>
                  <span class="text-xs text-gray-400 font-normal ml-2">
                    (<span id="char-count">0</span>/160 caracteres)
                  </span>
                </label>
                <textarea
                  id="description"
                  rows="2"
                  maxlength="160"
                  class="w-full px-4 py-2 bg-green-700/50 border border-green-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-colors"
                  required
                ></textarea>
                <div id="description-error" class="hidden text-red-400 text-xs mt-1"></div>
              </div>

              <!-- Componente TagsInput integrado -->
              <div class="col-span-2">
                <label class="block text-white text-sm font-medium mb-2">
                  Etiquetas
                </label>
                <div id="tags-input-container"></div>
              </div>

              <!-- Componente RichTextEditor integrado -->
              <div class="col-span-2">
                <label class="block text-white text-sm font-medium mb-2">
                  Contenido <span class="text-red-400">*</span>
                  <span class="text-xs text-gray-400 font-normal ml-2">(Soporta formato Markdown)</span>
                </label>
                <div id="rich-text-editor-container"></div>
                <div id="content-error" class="hidden text-red-400 text-xs mt-1"></div>
              </div>
            </div>

            <div class="flex items-center space-x-4 mt-6">
              <div class="flex items-center">
                <input
                  id="draft"
                  type="checkbox"
                  class="w-5 h-5 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                />
                <label for="draft" class="ml-2 text-white text-sm font-medium">
                  Guardar como borrador
                </label>
              </div>

              <div class="flex items-center">
                <input
                  id="comments-enabled"
                  type="checkbox"
                  class="w-5 h-5 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                  checked
                />
                <label for="comments-enabled" class="ml-2 text-white text-sm font-medium">
                  Permitir comentarios
                </label>
              </div>

              <div class="flex items-center">
                <input
                  id="featured"
                  type="checkbox"
                  class="w-5 h-5 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                />
                <label for="featured" class="ml-2 text-white text-sm font-medium">
                  Artículo destacado
                </label>
              </div>
            </div>

            <div class="flex justify-between items-center mt-6">
              <div class="text-sm text-gray-400">
                <span id="last-saved" class="hidden">Último guardado: <span id="save-time"></span></span>
              </div>
              <div class="flex space-x-4">
                <button
                  type="button"
                  id="debug-auth-btn"
                  class="px-4 py-2 bg-purple-600 hover:bg-purple-500 text-white text-sm font-medium rounded-md shadow-md transition-colors duration-300"
                >
                  Debug Auth
                </button>
                <button
                  type="button"
                  id="test-firestore-btn"
                  class="px-4 py-2 bg-orange-600 hover:bg-orange-500 text-white text-sm font-medium rounded-md shadow-md transition-colors duration-300"
                >
                  Test Firestore
                </button>
                <button
                  type="button"
                  id="cleanup-drafts-btn"
                  class="px-4 py-2 bg-red-600 hover:bg-red-500 text-white text-sm font-medium rounded-md shadow-md transition-colors duration-300"
                >
                  Limpiar Borradores
                </button>
                <button
                  type="button"
                  id="save-draft-btn"
                  class="px-6 py-3 bg-gray-600 hover:bg-gray-500 text-white font-medium rounded-md shadow-md transition-colors duration-300"
                >
                  Guardar borrador
                </button>
              <button
                type="button"
                id="preview-btn"
                class="px-6 py-3 bg-blue-600 hover:bg-blue-500 text-white font-medium rounded-md shadow-md transition-colors duration-300"
              >
                Vista previa
              </button>
              <button
                type="submit"
                id="submit-btn"
                class="px-6 py-3 bg-green-600 hover:bg-green-500 text-white font-medium rounded-md shadow-md transition-colors duration-300 flex items-center"
              >
                <span>Publicar artículo</span>
              </button>
              </div>
            </div>
          </form>

          <!-- Mensaje de éxito -->
          <div id="success-message" class="hidden bg-green-600/80 text-white p-4 rounded-md my-4">
            <div class="flex items-center">
              <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
            <p class="font-medium">¡Artículo creado con éxito!</p>
            </div>
            <div class="flex space-x-4 mt-2">
              <a id="view-article-link" href="#" class="text-white underline hover:text-green-200" target="_blank">Ver artículo</a>
              <a href="/admin/articles" class="text-white underline hover:text-green-200">Volver a la lista</a>
              <button id="sync-content-btn" class="text-white underline hover:text-green-200">Sincronizar con Markdown</button>
            </div>
          </div>

          <!-- Mensaje de sincronización -->
          <div id="sync-message" class="hidden bg-blue-600/80 text-white p-4 rounded-md my-4">
            <div class="flex items-center">
              <svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            <p class="font-medium">Sincronizando artículo con archivos Markdown...</p>
            </div>
            <div id="sync-status" class="text-sm mt-2">Procesando...</div>
          </div>

          <!-- Mensaje de error -->
          <div id="error-message" class="hidden bg-red-600/80 text-white p-4 rounded-md my-4">
            <div class="flex items-center">
              <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
              </svg>
              <div>
            <p class="font-medium">Error al crear el artículo</p>
            <p id="error-details" class="text-sm mt-1"></p>
              </div>
            </div>
          </div>
        </div>

        <!-- Modal de vista previa -->
        <div id="preview-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
          <div class="bg-green-900 p-6 rounded-lg max-w-5xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-bold text-white">Vista previa del artículo</h3>
              <button id="close-preview" class="text-gray-400 hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div id="preview-content" class="prose prose-invert prose-green max-w-none">
              <!-- Se llenará desde JavaScript -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminProtection>
</MainLayout>

<!-- Importar bibliotecas necesarias -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.4/dist/purify.min.js"></script>
<script src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

<script>
  import { auth, functions } from "@/core/firebase/config";
  import { onAuthStateChanged } from "firebase/auth";
  import { Timestamp } from "firebase/firestore";
  import { httpsCallable } from "firebase/functions";
  
  // Importar el nuevo servicio de artículos
  import { createArticle, saveDraft, deleteDraft, checkSlugExists, getDraftById, cleanupOldDraftsWithSlug } from "@/firebase/articles";

  // Función para sincronizar contenido
  const syncContentToFiles = httpsCallable(functions, 'syncContentToFiles');

  // Estado del formulario
  let formData = {
    title: '',
    slug: '',
    author: '',
    image: '',
    description: '',
    tags: [],
    content: '',
    draft: false,
    commentsEnabled: true,
    featured: false
  };

  // Variables de control
  let isFormDirty = false;
  let autosaveTimeout: number | null = null;
  let currentDraftId: string | null = null;

  // Elementos del DOM
  const loadingElement = document.getElementById("loading");
  const articleFormContainer = document.getElementById("article-form-container");
  const articleForm = document.getElementById("article-form") as HTMLFormElement | null;
  const successMessage = document.getElementById("success-message");
  const syncMessage = document.getElementById("sync-message");
  const syncStatusElement = document.getElementById("sync-status");
  const syncContentBtn = document.getElementById("sync-content-btn");
  const errorMessage = document.getElementById("error-message");
  const errorDetails = document.getElementById("error-details");
  const viewArticleLink = document.getElementById("view-article-link") as HTMLAnchorElement | null;
  const previewBtn = document.getElementById("preview-btn");
  const saveDraftBtn = document.getElementById("save-draft-btn");
  const submitBtn = document.getElementById("submit-btn") as HTMLButtonElement | null;
  const previewModal = document.getElementById("preview-modal");
  const previewContent = document.getElementById("preview-content");
  const closePreviewBtn = document.getElementById("close-preview");
  const autosaveIndicator = document.getElementById("autosave-indicator");
  const autosaveText = document.getElementById("autosave-text");
  const lastSaved = document.getElementById("last-saved");
  const saveTime = document.getElementById("save-time");

  // Elementos de formulario básicos
  const titleInput = document.getElementById("title") as HTMLInputElement | null;
  const slugInput = document.getElementById("slug") as HTMLInputElement | null;
  const authorInput = document.getElementById("author") as HTMLInputElement | null;
  const descriptionInput = document.getElementById("description") as HTMLTextAreaElement | null;
  const draftCheckbox = document.getElementById("draft") as HTMLInputElement | null;
  const commentsEnabledCheckbox = document.getElementById("comments-enabled") as HTMLInputElement | null;
  const featuredCheckbox = document.getElementById("featured") as HTMLInputElement | null;
  const charCount = document.getElementById("char-count");

  // Tipos para validadores
  type ValidatorResult = string | true;
  type Validator = (value: string) => ValidatorResult | Promise<ValidatorResult>;

  // Validadores
  const validators: Record<string, Validator> = {
    title: (value: string): ValidatorResult => {
      if (!value.trim()) return "El título es obligatorio";
      if (value.length < 5) return "El título debe tener al menos 5 caracteres";
      if (value.length > 100) return "El título no puede exceder 100 caracteres";
      return true;
    },
    slug: async (value: string): Promise<ValidatorResult> => {
      if (!value.trim()) return "El slug es obligatorio";
      if (!/^[a-z0-9-]+$/.test(value)) return "El slug solo puede contener letras minúsculas, números y guiones";
      if (value.length < 3) return "El slug debe tener al menos 3 caracteres";
      if (value.length > 100) return "El slug no puede exceder 100 caracteres";
      
      // Solo validar duplicados en el envío final del formulario, no durante la escritura
      return true;
    },
    author: (value: string): ValidatorResult => {
      if (!value.trim()) return "El autor es obligatorio";
      if (value.length < 2) return "El nombre del autor debe tener al menos 2 caracteres";
      if (value.length > 50) return "El nombre del autor no puede exceder 50 caracteres";
      return true;
    },
    image: (value: string): ValidatorResult => {
      if (!value.trim()) return "La URL de la imagen es obligatoria";
      try {
        new URL(value);
        return true;
      } catch {
        return "Debe ser una URL válida";
      }
    },
    description: (value: string): ValidatorResult => {
      if (!value.trim()) return "La descripción es obligatoria";
      if (value.length < 10) return "La descripción debe tener al menos 10 caracteres";
      if (value.length > 160) return "La descripción no puede exceder 160 caracteres";
      return true;
    },
    content: (value: string): ValidatorResult => {
      if (!value.trim()) return "El contenido es obligatorio";
      if (value.length < 50) return "El contenido debe tener al menos 50 caracteres";
      return true;
    },
    slugForSubmit: async (value: string): Promise<ValidatorResult> => {
      if (!value.trim()) return "El slug es obligatorio";
      if (!/^[a-z0-9-]+$/.test(value)) return "El slug solo puede contener letras minúsculas, números y guiones";
      if (value.length < 3) return "El slug debe tener al menos 3 caracteres";
      if (value.length > 100) return "El slug no puede exceder 100 caracteres";
      
      try {
        // Debug: Log para entender cuándo se ejecuta la validación
        console.log('[SLUG VALIDATION SUBMIT] Validando slug:', value);
        console.log('[SLUG VALIDATION SUBMIT] currentDraftId:', currentDraftId);
        
        // Excluir el borrador actual de la verificación
        const excludeId = currentDraftId ? currentDraftId : undefined;
        console.log('[SLUG VALIDATION SUBMIT] excludeId:', excludeId);
        
        const exists = await checkSlugExists(value, excludeId);
        console.log('[SLUG VALIDATION SUBMIT] Slug exists:', exists);
        
        if (exists) return "Este slug ya está en uso";
      } catch (error) {
        console.warn("No se pudo verificar el slug:", error);
      }
      
      return true;
    }
  };

  // Función para validar un campo
  const validateField = async (
    input: { value: string } | null, 
    errorElement: HTMLElement | null, 
    validator: Validator
  ): Promise<boolean> => {
    if (!input || !validator) return true;
    
    const result = await validator(input.value);
    if (result !== true) {
      const inputElement = input as HTMLInputElement | HTMLTextAreaElement;
      if (inputElement.classList) {
        inputElement.classList.remove('border-green-600');
        inputElement.classList.add('border-red-500');
      }
      if (errorElement) {
        errorElement.textContent = result;
        errorElement.classList.remove('hidden');
      }
      return false;
    } else {
      const inputElement = input as HTMLInputElement | HTMLTextAreaElement;
      if (inputElement.classList) {
        inputElement.classList.remove('border-red-500');
        inputElement.classList.add('border-green-600');
      }
      if (errorElement) errorElement.classList.add('hidden');
      return true;
    }
  };
  
  // Generar slug a partir del título
  const generateSlug = (title: string): string => {
    return title
      .toLowerCase()
      .replace(/[^\w\sáéíóúüñ]/g, '')
      .replace(/\s+/g, '-')
      .replace(/á/g, 'a')
      .replace(/é/g, 'e')
      .replace(/í/g, 'i')
      .replace(/ó/g, 'o')
      .replace(/ú|ü/g, 'u')
      .replace(/ñ/g, 'n')
      .replace(/-+/g, '-')
      .trim();
  };
  
  // Actualizar contador de caracteres
  const updateCharCount = (): void => {
    if (charCount && descriptionInput) {
      const count = descriptionInput.value.length;
      charCount.textContent = count.toString();
      charCount.className = count > 140 ? 'text-yellow-400' : count > 160 ? 'text-red-400' : 'text-gray-400';
    }
  };

  // Autoguardado
  const showAutosaveIndicator = (text: string = "Guardando borrador..."): void => {
    if (autosaveIndicator && autosaveText) {
      autosaveText.textContent = text;
      autosaveIndicator.classList.remove('hidden');
    }
  };

  const hideAutosaveIndicator = (): void => {
    if (autosaveIndicator) {
      setTimeout(() => {
        autosaveIndicator.classList.add('hidden');
      }, 2000);
    }
  };

  const updateLastSaved = (): void => {
    if (lastSaved && saveTime) {
      const now = new Date();
      saveTime.textContent = now.toLocaleTimeString();
      lastSaved.classList.remove('hidden');
    }
  };

  const saveDraftToFirestore = async (showIndicator: boolean = true): Promise<void> => {
    if (!isFormDirty) return;
    
    if (showIndicator) showAutosaveIndicator();
    
    try {
      const draftData = {
        title: formData.title,
        slug: formData.slug,
        author: formData.author,
        description: formData.description,
        content: formData.content,
        image: formData.image,
        tags: formData.tags,
        draft: true,
        commentsEnabled: formData.commentsEnabled,
        featured: formData.featured
      };

      currentDraftId = await saveDraft(draftData, currentDraftId || undefined);

      if (showIndicator) {
        if (autosaveText) autosaveText.textContent = "Borrador guardado";
        updateLastSaved();
        hideAutosaveIndicator();
      }
      
      isFormDirty = false;
    } catch (error) {
      console.error("Error al guardar borrador:", error);
      if (showIndicator && autosaveText) {
        autosaveText.textContent = "Error al guardar";
        hideAutosaveIndicator();
      }
    }
  };

  const scheduleAutosave = (): void => {
    if (autosaveTimeout) clearTimeout(autosaveTimeout);
    autosaveTimeout = window.setTimeout(() => saveDraftToFirestore(), 3000);
  };

  // Configurar generación de slug
  const setupSlugGeneration = (): void => {
    if (titleInput && slugInput) {
      titleInput.addEventListener('input', () => {
        const titleValue = titleInput.value;
        const lastValue = titleInput.dataset.lastValue || '';
        
        if (!slugInput.value || lastValue === slugInput.value) {
          slugInput.value = generateSlug(titleValue);
          formData.slug = slugInput.value;
          isFormDirty = true;
      }
      titleInput.dataset.lastValue = slugInput.value;
        formData.title = titleValue;
        scheduleAutosave();
    });
    
    slugInput.addEventListener('input', () => {
      slugInput.value = generateSlug(slugInput.value);
        formData.slug = slugInput.value;
        isFormDirty = true;
        scheduleAutosave();
      });
      
      // Agregar validación solo en blur para evitar validaciones prematuras
      slugInput.addEventListener('blur', () => {
        console.log('[SLUG BLUR] Validando slug en blur:', slugInput.value);
        validateField(slugInput, document.getElementById('slug-error'), validators.slugForSubmit);
      });
    }
  };

  // Configurar campos básicos
  const setupBasicFields = (): void => {
    if (authorInput) {
      authorInput.addEventListener('input', () => {
        formData.author = authorInput.value;
        isFormDirty = true;
        scheduleAutosave();
      });
      
      authorInput.addEventListener('blur', () => {
        validateField(authorInput, document.getElementById('author-error'), validators.author);
      });
    }

    if (descriptionInput) {
      descriptionInput.addEventListener('input', () => {
        formData.description = descriptionInput.value;
        updateCharCount();
        isFormDirty = true;
        scheduleAutosave();
      });
      
      descriptionInput.addEventListener('blur', () => {
        validateField(descriptionInput, document.getElementById('description-error'), validators.description);
      });
    }

    // Checkboxes
    [draftCheckbox, commentsEnabledCheckbox, featuredCheckbox].forEach(checkbox => {
      if (checkbox) {
        checkbox.addEventListener('change', () => {
          if (checkbox === draftCheckbox) formData.draft = checkbox.checked;
          if (checkbox === commentsEnabledCheckbox) formData.commentsEnabled = checkbox.checked;
          if (checkbox === featuredCheckbox) formData.featured = checkbox.checked;
          isFormDirty = true;
          scheduleAutosave();
        });
      }
    });
  };

  // Inicializar componentes React simplificados
  const initializeReactComponents = (): void => {
    // RichTextEditor simplificado
    const richTextEditorContainer = document.getElementById('rich-text-editor-container');
    if (richTextEditorContainer) {
      const textarea = document.createElement('textarea');
      textarea.id = 'content';
      textarea.rows = 20;
      textarea.className = 'w-full px-4 py-2 bg-green-700/50 border border-green-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-400 text-white font-mono transition-colors resize-y';
      textarea.placeholder = 'Escribe tu contenido aquí usando Markdown...';
      
      textarea.addEventListener('input', () => {
        formData.content = textarea.value;
        isFormDirty = true;
        scheduleAutosave();
        
        // Actualizar contador de palabras
        const words = textarea.value.split(/\s+/).filter(w => w.length > 0).length;
        let counter = richTextEditorContainer.querySelector('.word-counter');
        if (!counter) {
          counter = document.createElement('div');
          counter.className = 'word-counter absolute bottom-2 right-2 text-xs text-gray-400 bg-green-900/80 px-2 py-1 rounded';
          richTextEditorContainer.style.position = 'relative';
          richTextEditorContainer.appendChild(counter);
        }
        counter.textContent = `${words} palabras`;
      });
      
      textarea.addEventListener('blur', () => {
        validateField(
          { value: formData.content }, 
          document.getElementById('content-error'), 
          validators.content
        );
      });

      richTextEditorContainer.appendChild(textarea);
    }

    // ImageUploader simplificado
    const imageUploaderContainer = document.getElementById('image-uploader-container');
    if (imageUploaderContainer) {
      const wrapper = document.createElement('div');
      wrapper.className = 'space-y-2';
      
      const label = document.createElement('label');
      label.className = 'block text-white text-sm font-medium';
      label.innerHTML = 'URL de imagen destacada <span class="text-red-400">*</span>';
      
      const input = document.createElement('input');
      input.type = 'url';
      input.className = 'w-full px-4 py-2 bg-green-700/50 border border-green-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-colors';
      input.placeholder = 'https://example.com/imagen.jpg';
      input.value = formData.image;
      
      input.addEventListener('input', () => {
        formData.image = input.value;
        isFormDirty = true;
        scheduleAutosave();
      });
      
      input.addEventListener('blur', () => {
        validateField(
          input, 
          document.getElementById('image-error'), 
          validators.image
        );
      });

      wrapper.appendChild(label);
      wrapper.appendChild(input);
      imageUploaderContainer.appendChild(wrapper);
    }

    // TagsInput simplificado
    const tagsInputContainer = document.getElementById('tags-input-container');
    if (tagsInputContainer) {
      const wrapper = document.createElement('div');
      wrapper.className = 'space-y-2';
      
      const input = document.createElement('input');
      input.type = 'text';
      input.className = 'w-full px-4 py-2 bg-green-700/50 border border-green-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-colors';
      input.placeholder = 'umbanda, espiritualidad, etc. (separadas por comas)';
      
      const preview = document.createElement('div');
      preview.className = 'flex flex-wrap gap-2';
      
      const updateTags = () => {
        const tags = input.value
          .split(',')
          .map(tag => tag.trim())
          .filter(tag => tag);
        formData.tags = tags;
        
        // Actualizar vista previa
        preview.innerHTML = '';
        tags.forEach(tag => {
          const span = document.createElement('span');
          span.className = 'px-2 py-1 bg-green-600 text-white text-xs rounded-full';
          span.textContent = tag;
          preview.appendChild(span);
        });
      };
      
      input.addEventListener('input', () => {
        updateTags();
        isFormDirty = true;
        scheduleAutosave();
      });

      wrapper.appendChild(input);
      wrapper.appendChild(preview);
      tagsInputContainer.appendChild(wrapper);
    }
  };
  
  // Enviar formulario
  const handleSubmit = async (e: Event): Promise<void> => {
    e.preventDefault();
    
    // Validación completa del formulario
    const isValid = await validateFormComplete();
    if (!isValid) {
      if (errorMessage && errorDetails) {
        errorDetails.textContent = "Por favor, corrige los errores en el formulario.";
        errorMessage.classList.remove("hidden");
      }
      return;
    }
    
    // Mostrar estado de carga
    if (submitBtn) {
      submitBtn.disabled = true;
      submitBtn.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span>Guardando...</span>
      `;
    }
    
    // Ocultar mensajes previos
    [successMessage, errorMessage, syncMessage].forEach(msg => {
      if (msg) msg.classList.add("hidden");
    });
    
    try {
      // Crear objeto con datos del artículo
      const articleData = {
        ...formData,
        publishDate: Timestamp.fromDate(new Date())
      };
      
      // Guardar usando el nuevo servicio
      await createArticle(articleData);
      
      // Limpiar borrador si existe
      if (currentDraftId) {
        try {
          await deleteDraft(currentDraftId);
          currentDraftId = null;
        } catch (error) {
          console.warn("No se pudo eliminar el borrador:", error);
        }
      }
      
      // Mostrar mensaje de éxito
      if (successMessage && viewArticleLink) {
        viewArticleLink.href = `/blog/${articleData.slug}`;
        successMessage.classList.remove("hidden");
        
        // Si no es borrador, ofrecer sincronización
        if (!articleData.draft && syncContentBtn) {
          syncContentBtn.style.display = 'inline';
        } else if (syncContentBtn) {
          syncContentBtn.style.display = 'none';
        }
        
        // Limpiar formulario
        if (articleForm && typeof articleForm.reset === 'function') {
        articleForm.reset();
        }
        formData = {
          title: '',
          slug: '',
          author: '',
          image: '',
          description: '',
          tags: [],
          content: '',
          draft: false,
          commentsEnabled: true,
          featured: false
        };
        isFormDirty = false;
        updateCharCount();
        if (lastSaved) lastSaved.classList.add('hidden');
      }
    } catch (error) {
      console.error("Error al guardar artículo:", error);
      
      // Mostrar mensaje de error
      if (errorMessage && errorDetails) {
        const errorMsg = error instanceof Error ? error.message : "Ha ocurrido un error inesperado.";
        errorDetails.textContent = errorMsg;
        errorMessage.classList.remove("hidden");
      }
    } finally {
      // Restaurar botón
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.innerHTML = `<span>Publicar artículo</span>`;
      }
    }
  };

  // Validar formulario completo
  const validateFormComplete = async (): Promise<boolean> => {
    const fields = [
      { value: formData.title, error: document.getElementById('title-error'), validator: validators.title },
      { value: formData.slug, error: document.getElementById('slug-error'), validator: validators.slugForSubmit },
      { value: formData.author, error: document.getElementById('author-error'), validator: validators.author },
      { value: formData.image, error: document.getElementById('image-error'), validator: validators.image },
      { value: formData.description, error: document.getElementById('description-error'), validator: validators.description },
      { value: formData.content, error: document.getElementById('content-error'), validator: validators.content }
    ];

    let isValid = true;
    
    for (const { value, error, validator } of fields) {
      const result = await validator(value);
      if (result !== true) {
        if (error) {
          error.textContent = result;
          error.classList.remove('hidden');
        }
        isValid = false;
      } else {
        if (error) error.classList.add('hidden');
      }
    }

    return isValid;
  };
  
  // Mostrar vista previa
  const showPreview = (): void => {
    if (!previewContent || !previewModal) return;
    
    try {
      // Crear contenido de vista previa
      const title = formData.title || "Sin título";
      const author = formData.author || "Sin autor";
      const description = formData.description || "Sin descripción";
      const content = formData.content || "*No hay contenido para mostrar*";
      const image = formData.image;
      
      // Verificar que marked y DOMPurify estén disponibles
      if (typeof window !== 'undefined' && (window as Window & { marked?: any; DOMPurify?: any }).marked && (window as Window & { marked?: any; DOMPurify?: any }).DOMPurify) {
        const htmlContent = (window as Window & { DOMPurify: any }).DOMPurify.sanitize((window as Window & { marked: any }).marked.parse(content));
        
        // Crear HTML de vista previa
        let previewHtml = `
          <div class="mb-6">
            <h1 class="text-3xl font-bold text-white mb-2">${title}</h1>
            <p class="text-gray-300 mb-4">Por ${author}</p>
            <p class="text-gray-400 italic">${description}</p>
          </div>
        `;
        
        if (image) {
          previewHtml += `
            <div class="mb-6">
              <img src="${image}" alt="${title}" class="w-full h-64 object-cover rounded-lg" />
            </div>
          `;
        }
        
        previewHtml += `<div class="prose prose-invert prose-green max-w-none">${htmlContent}</div>`;
        
        previewContent.innerHTML = previewHtml;
      previewModal.classList.remove("hidden");
      } else {
        alert("Las librerías de vista previa no están disponibles.");
      }
    } catch (error) {
      console.error("Error al generar vista previa:", error);
      alert("Error al generar la vista previa.");
    }
  };

  // Manejar sincronización
  const handleSync = async (): Promise<void> => {
    if (!syncMessage || !syncStatusElement) return;
    
    syncMessage.classList.remove("hidden");
    syncStatusElement.textContent = "Iniciando sincronización...";
    
    try {
      await syncContentToFiles({
        forceSync: true
      });
      
      syncStatusElement.textContent = "Sincronización completada exitosamente.";
      
      setTimeout(() => {
        if (syncMessage) syncMessage.classList.add("hidden");
      }, 3000);
    } catch (error) {
      console.error("Error en sincronización:", error);
      const errorMsg = error instanceof Error ? error.message : "Error desconocido";
      syncStatusElement.textContent = `Error: ${errorMsg}`;
    }
  };

  // Función para limpiar borradores duplicados
  const cleanupDrafts = async (): Promise<void> => {
    console.log('[CLEANUP] Iniciando limpieza de borradores duplicados...');
    
    if (!formData.slug) {
      alert('No hay slug para limpiar');
      return;
    }
    
    try {
      await cleanupOldDraftsWithSlug(formData.slug, currentDraftId || undefined);
      alert('✅ Borradores duplicados eliminados exitosamente!');
    } catch (error) {
      console.error('[CLEANUP] Error al limpiar borradores:', error);
      alert('❌ Error al limpiar borradores: ' + (error instanceof Error ? error.message : 'Error desconocido'));
    }
  };
  
  // Configurar eventos
  const setupEventListeners = (): void => {
    // Formulario
    if (articleForm) {
      articleForm.addEventListener("submit", handleSubmit);
    }
    
    // Botones
    if (previewBtn) {
      previewBtn.addEventListener("click", showPreview);
    }
    
    if (saveDraftBtn) {
      saveDraftBtn.addEventListener("click", () => saveDraftToFirestore(true));
    }
    
    if (syncContentBtn) {
      syncContentBtn.addEventListener("click", handleSync);
    }
    
    // Botón de debug
    const debugAuthBtn = document.getElementById("debug-auth-btn");
    if (debugAuthBtn) {
      debugAuthBtn.addEventListener("click", debugAuth);
    }

    // Botón de prueba de Firestore
    const testFirestoreBtn = document.getElementById("test-firestore-btn");
    if (testFirestoreBtn) {
      testFirestoreBtn.addEventListener("click", testFirestore);
    }

    // Botón de limpiar borradores
    const cleanupDraftsBtn = document.getElementById("cleanup-drafts-btn");
    if (cleanupDraftsBtn) {
      cleanupDraftsBtn.addEventListener("click", cleanupDrafts);
    }

    // Modal de vista previa
    if (closePreviewBtn && previewModal) {
      closePreviewBtn.addEventListener("click", () => {
        previewModal.classList.add("hidden");
      });
      
      previewModal.addEventListener("click", (e: Event) => {
        if (e.target === previewModal) {
          previewModal.classList.add("hidden");
        }
      });
    }
    
    // Cerrar modales con Escape
    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        if (previewModal && !previewModal.classList.contains("hidden")) {
        previewModal.classList.add("hidden");
        }
      }
    });
  };

  // Función para depurar autenticación
  const debugAuth = async (): Promise<void> => {
    console.log('[DEBUG] Verificando estado de autenticación...');
    
    if (!auth.currentUser) {
      console.error('[DEBUG] No hay usuario autenticado');
      return;
    }
    
    const user = auth.currentUser;
    console.log('[DEBUG] Usuario autenticado:', {
      uid: user.uid,
      email: user.email,
      displayName: user.displayName,
      emailVerified: user.emailVerified
    });
    
    try {
      const token = await user.getIdToken(true); // Forzar refresh del token
      console.log('[DEBUG] Token obtenido exitosamente, longitud:', token.length);
      
      // Decodificar el token para ver su contenido (solo para debug)
      const tokenPayload = JSON.parse(atob(token.split('.')[1]));
      console.log('[DEBUG] Token payload:', {
        email: tokenPayload.email,
        email_verified: tokenPayload.email_verified,
        iss: tokenPayload.iss,
        aud: tokenPayload.aud,
        exp: new Date(tokenPayload.exp * 1000),
        iat: new Date(tokenPayload.iat * 1000)
      });
    } catch (error) {
      console.error('[DEBUG] Error al obtener token:', error);
    }
  };

  // Función para probar Firestore
  const testFirestore = async (): Promise<void> => {
    console.log('[TEST] Probando conectividad con Firestore...');
    
    if (!auth.currentUser) {
      console.error('[TEST] No hay usuario autenticado');
      alert('No hay usuario autenticado');
      return;
    }
    
    try {
      // Probar crear un borrador simple
      const testDraft = {
        title: 'Test Draft',
        slug: 'test-draft-' + Date.now(),
        author: 'Test Author',
        description: 'Test description',
        content: 'Test content',
        image: 'https://via.placeholder.com/400x300',
        tags: ['test'],
        draft: true,
        commentsEnabled: true,
        featured: false
      };
      
      console.log('[TEST] Intentando guardar borrador de prueba...');
      const draftId = await saveDraft(testDraft);
      console.log('[TEST] Borrador guardado exitosamente con ID:', draftId);
      
      // Probar leer el borrador
      console.log('[TEST] Intentando leer borrador...');
      const savedDraft = await getDraftById(draftId);
      console.log('[TEST] Borrador leído exitosamente:', savedDraft);
      
      // Probar eliminar el borrador
      console.log('[TEST] Intentando eliminar borrador de prueba...');
      await deleteDraft(draftId);
      console.log('[TEST] Borrador eliminado exitosamente');
      
      alert('✅ Todas las pruebas de Firestore pasaron exitosamente!');
      
    } catch (error) {
      console.error('[TEST] Error en prueba de Firestore:', error);
      alert('❌ Error en prueba de Firestore: ' + (error instanceof Error ? error.message : 'Error desconocido'));
    }
  };

  // Inicializar el formulario cuando el usuario esté autenticado
  onAuthStateChanged(auth, async (user) => {
    if (user) {
      // Depurar autenticación
      await debugAuth();
      
      // Ocultar cargando y mostrar formulario
      if (loadingElement) loadingElement.classList.add("hidden");
      if (articleFormContainer) articleFormContainer.classList.remove("hidden");
      
      // Configurar formulario
      setupSlugGeneration();
      setupBasicFields();
      setupEventListeners();
      initializeReactComponents();
      updateCharCount();
      
      // Autocompletar autor con nombre del usuario si está disponible
      if (user.displayName && authorInput && !authorInput.value) {
        authorInput.value = user.displayName;
        formData.author = user.displayName;
      }
    }
  });

  // Limpiar timeout al salir de la página
  window.addEventListener('beforeunload', () => {
    if (autosaveTimeout) clearTimeout(autosaveTimeout);
    if (isFormDirty) {
      // Intentar guardar borrador antes de salir
      saveDraftToFirestore(false);
    }
  });
</script> 