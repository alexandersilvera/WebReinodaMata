---
import MainLayout from "@/layouts/MainLayout.astro";
import AdminProtection from "@/components/AdminProtection";
---

<MainLayout title="Crear Artículo | Reino Da Mata">
  <AdminProtection client:load>
    <div class="max-w-7xl mx-auto w-full px-4 py-8">
      <!-- Header -->
      <div class="mb-8 flex justify-between items-center">
        <div>
          <h1 class="text-4xl font-bold text-green-700 mb-2">Crear Nuevo Artículo</h1>
          <p class="text-gray-300">Editor avanzado para crear contenido espiritual de calidad.</p>
        </div>
        <div class="flex space-x-4">
          <a href="/admin/articles" class="text-green-400 hover:text-green-300 flex items-center px-4 py-2 border border-green-600 rounded-md transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
            </svg>
            <span>Volver</span>
          </a>
        </div>
      </div>

      <!-- Contenedor principal -->
      <div id="admin-container" class="relative">
        <!-- Estado de carga -->
        <div id="loading" class="flex justify-center items-center py-20">
          <div class="text-center">
            <svg class="animate-spin h-12 w-12 text-green-500 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="text-green-300 text-lg">Cargando editor...</p>
          </div>
        </div>

        <!-- Editor principal -->
        <div id="editor-container" class="hidden">
          <!-- Barra de estado -->
          <div id="status-bar" class="mb-6 p-4 bg-green-900/40 rounded-lg border border-green-700/50">
            <div class="flex justify-between items-center">
              <div class="flex items-center space-x-6">
                <div id="save-status" class="flex items-center text-sm">
                  <div class="w-2 h-2 bg-gray-400 rounded-full mr-2"></div>
                  <span class="text-gray-400">Sin cambios</span>
                </div>
                <div class="text-sm text-gray-400">
                  <span id="word-count">0 palabras</span> • 
                  <span id="char-count">0 caracteres</span>
                </div>
              </div>
              <div class="flex items-center space-x-4">
                <button id="save-draft-btn" class="text-sm text-green-400 hover:text-green-300 flex items-center">
                  <svg class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                  Guardar borrador
                </button>
                <div id="last-saved" class="text-xs text-gray-500 hidden">
                  Guardado: <span id="save-time"></span>
                </div>
              </div>
            </div>
          </div>

          <!-- Formulario del artículo -->
          <form id="article-form" class="space-y-8">
            <!-- Grid principal -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <!-- Columna principal (contenido) -->
              <div class="lg:col-span-2 space-y-6">
                <!-- Título -->
                <div>
                  <label for="title" class="block text-white text-lg font-medium mb-3">
                    Título del artículo <span class="text-red-400">*</span>
                  </label>
                  <input
                    id="title"
                    type="text"
                    class="w-full px-4 py-3 text-xl bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all"
                    placeholder="Escribe un título atractivo..."
                    required
                  />
                  <div id="title-error" class="hidden text-red-400 text-sm mt-2"></div>
                </div>

                <!-- Slug -->
                <div>
                  <label for="slug" class="block text-white text-sm font-medium mb-2">
                    URL del artículo <span class="text-red-400">*</span>
                    <span class="text-xs text-gray-400 font-normal ml-2">(se genera automáticamente)</span>
                  </label>
                  <div class="flex">
                    <span class="inline-flex items-center px-3 text-sm text-gray-400 bg-green-800/50 border border-r-0 border-green-600 rounded-l-lg">
                      /blog/
                    </span>
                    <input
                      id="slug"
                      type="text"
                      class="flex-1 px-4 py-2 bg-green-700/50 border border-green-600 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all"
                      required
                    />
                  </div>
                  <div id="slug-error" class="hidden text-red-400 text-sm mt-2"></div>
                </div>

                <!-- Descripción -->
                <div>
                  <label for="description" class="block text-white text-sm font-medium mb-2">
                    Descripción breve <span class="text-red-400">*</span>
                    <span class="text-xs text-gray-400 font-normal ml-2">
                      (<span id="desc-count">0</span>/160 caracteres)
                    </span>
                  </label>
                  <textarea
                    id="description"
                    rows="3"
                    maxlength="160"
                    class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all resize-none"
                    placeholder="Una breve descripción que aparecerá en las redes sociales y buscadores..."
                    required
                  ></textarea>
                  <div id="description-error" class="hidden text-red-400 text-sm mt-2"></div>
                </div>

                <!-- Editor de contenido -->
                <div>
                  <label class="block text-white text-lg font-medium mb-3">
                    Contenido del artículo <span class="text-red-400">*</span>
                  </label>
                  <div id="content-editor" class="bg-green-900/30 rounded-lg border border-green-600 overflow-hidden">
                    <!-- El editor se cargará aquí -->
                  </div>
                  <div id="content-error" class="hidden text-red-400 text-sm mt-2"></div>
                </div>
              </div>

              <!-- Sidebar (metadatos) -->
              <div class="space-y-6">
                <!-- Imagen destacada -->
                <div class="bg-green-900/30 p-6 rounded-lg border border-green-700/50">
                  <h3 class="text-white text-lg font-medium mb-4">Imagen destacada</h3>
                  <div id="image-uploader">
                    <!-- El componente de imagen se cargará aquí -->
                  </div>
                </div>

                <!-- Metadatos -->
                <div class="bg-green-900/30 p-6 rounded-lg border border-green-700/50">
                  <h3 class="text-white text-lg font-medium mb-4">Metadatos</h3>
                  
                  <!-- Autor -->
                  <div class="mb-4">
                    <label for="author" class="block text-white text-sm font-medium mb-2">
                      Autor <span class="text-red-400">*</span>
                    </label>
                    <input
                      id="author"
                      type="text"
                      class="w-full px-3 py-2 bg-green-700/50 border border-green-600 rounded-md focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-all"
                      required
                    />
                    <div id="author-error" class="hidden text-red-400 text-sm mt-1"></div>
                  </div>

                  <!-- Etiquetas -->
                  <div id="tags-input" class="mb-4">
                    <!-- El componente de etiquetas se cargará aquí -->
                  </div>

                  <!-- Opciones -->
                  <div class="space-y-3">
                    <div class="flex items-center">
                      <input
                        id="draft"
                        type="checkbox"
                        class="w-4 h-4 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                      />
                      <label for="draft" class="ml-2 text-white text-sm">
                        Guardar como borrador
                      </label>
                    </div>

                    <div class="flex items-center">
                      <input
                        id="featured"
                        type="checkbox"
                        class="w-4 h-4 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                      />
                      <label for="featured" class="ml-2 text-white text-sm">
                        Artículo destacado
                      </label>
                    </div>

                    <div class="flex items-center">
                      <input
                        id="comments-enabled"
                        type="checkbox"
                        class="w-4 h-4 text-green-600 bg-green-700/50 border-green-600 rounded focus:ring-0"
                        checked
                      />
                      <label for="comments-enabled" class="ml-2 text-white text-sm">
                        Permitir comentarios
                      </label>
                    </div>
                  </div>
                </div>

                <!-- Acciones -->
                <div class="bg-green-900/30 p-6 rounded-lg border border-green-700/50">
                  <h3 class="text-white text-lg font-medium mb-4">Acciones</h3>
                  
                  <div class="space-y-3">
                    <button
                      type="button"
                      id="preview-btn"
                      class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white font-medium rounded-md transition-colors"
                    >
                      Vista previa
                    </button>
                    
                    <button
                      type="submit"
                      id="publish-btn"
                      class="w-full px-4 py-3 bg-green-600 hover:bg-green-500 text-white font-medium rounded-md transition-colors flex items-center justify-center"
                    >
                      <span>Publicar artículo</span>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </form>

          <!-- Mensajes de estado -->
          <div id="messages" class="mt-6 space-y-4">
            <!-- Mensaje de éxito -->
            <div id="success-message" class="hidden bg-green-600/20 border border-green-500/30 text-green-300 p-4 rounded-lg">
              <div class="flex items-center">
                <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                <div>
                  <p class="font-medium">¡Artículo publicado con éxito!</p>
                  <div class="flex space-x-4 mt-2 text-sm">
                    <a id="view-article-link" href="#" class="underline hover:text-green-200" target="_blank">Ver artículo</a>
                    <a href="/admin/articles" class="underline hover:text-green-200">Gestionar artículos</a>
                    <button id="sync-content-btn" class="underline hover:text-green-200">Sincronizar</button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Mensaje de error -->
            <div id="error-message" class="hidden bg-red-600/20 border border-red-500/30 text-red-300 p-4 rounded-lg">
              <div class="flex items-center">
                <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
                <div>
                  <p class="font-medium">Error al publicar el artículo</p>
                  <p id="error-details" class="text-sm mt-1"></p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminProtection>

  <!-- Modal de vista previa -->
  <div id="preview-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
    <div class="bg-green-900 rounded-lg max-w-6xl w-full max-h-[90vh] overflow-hidden">
      <div class="flex justify-between items-center p-6 border-b border-green-700">
        <h3 class="text-xl font-bold text-white">Vista previa del artículo</h3>
        <button id="close-preview" class="text-gray-400 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div id="preview-content" class="p-6 overflow-y-auto max-h-[calc(90vh-80px)]">
        <!-- Contenido de vista previa -->
      </div>
    </div>
  </div>
</MainLayout>

<!-- Scripts y estilos -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.4/dist/purify.min.js"></script>

<script>
  // Importar DOMPurify y marked dinámicamente
  let DOMPurify: any;
  let marked: any;
  
  // Cargar las librerías dinámicamente
  const loadLibraries = async () => {
    try {
      // @ts-ignore
      DOMPurify = (await import('https://cdn.skypack.dev/dompurify')).default;
      // @ts-ignore  
      marked = (await import('https://cdn.skypack.dev/marked')).default;
    } catch (error) {
      console.error('Error cargando librerías:', error);
    }
  };

  import { auth, db, functions } from "@/core/firebase/config";
  import { onAuthStateChanged } from "firebase/auth";
  import { collection, addDoc, doc, setDoc, deleteDoc, Timestamp, serverTimestamp } from "firebase/firestore";
  import { httpsCallable } from "firebase/functions";

  // Elementos del DOM
  const loadingElement = document.getElementById("loading");
  const editorContainer = document.getElementById("editor-container");
  const articleForm = document.getElementById("article-form") as HTMLFormElement;
  
  // Elementos del formulario
  const titleInput = document.getElementById("title") as HTMLInputElement;
  const slugInput = document.getElementById("slug") as HTMLInputElement;
  const descriptionInput = document.getElementById("description") as HTMLTextAreaElement;
  const authorInput = document.getElementById("author") as HTMLInputElement;
  const draftCheckbox = document.getElementById("draft") as HTMLInputElement;
  const featuredCheckbox = document.getElementById("featured") as HTMLInputElement;
  const commentsEnabledCheckbox = document.getElementById("comments-enabled") as HTMLInputElement;
  
  // Elementos de estado
  const saveStatus = document.getElementById("save-status");
  const wordCount = document.getElementById("word-count");
  const charCount = document.getElementById("char-count");
  const descCount = document.getElementById("desc-count");
  const lastSaved = document.getElementById("last-saved");
  const saveTime = document.getElementById("save-time");
  
  // Botones
  const saveDraftBtn = document.getElementById("save-draft-btn");
  const previewBtn = document.getElementById("preview-btn");
  const publishBtn = document.getElementById("publish-btn");
  
  // Mensajes
  const successMessage = document.getElementById("success-message");
  const errorMessage = document.getElementById("error-message");
  const errorDetails = document.getElementById("error-details");
  const viewArticleLink = document.getElementById("view-article-link");
  const syncContentBtn = document.getElementById("sync-content-btn");
  
  // Modal
  const previewModal = document.getElementById("preview-modal");
  const closePreview = document.getElementById("close-preview");
  const previewContent = document.getElementById("preview-content");

  // Variables de estado
  const contentEditor = null;
  const imageUploader = null;
  const tagsInput = null;
  let currentDraftId = null;
  let isFormDirty = false;
  let autosaveTimeout = null;
  let currentContent = '';
  let currentImageUrl = '';
  let currentTags = [];

  // Funciones de utilidad
  const generateSlug = (title: string) => {
    return title
      .toLowerCase()
      .replace(/[^\w\sáéíóúüñ]/g, '')
      .replace(/\s+/g, '-')
      .replace(/á/g, 'a')
      .replace(/é/g, 'e')
      .replace(/í/g, 'i')
      .replace(/ó/g, 'o')
      .replace(/ú|ü/g, 'u')
      .replace(/ñ/g, 'n')
      .replace(/-+/g, '-')
      .trim();
  };

  const updateCounts = () => {
    if (wordCount && currentContent) {
      const words = currentContent.trim().split(/\s+/).filter(word => word.length > 0).length;
      wordCount.textContent = `${words} palabras`;
    }
    
    if (charCount && currentContent) {
      charCount.textContent = `${currentContent.length} caracteres`;
    }
    
    if (descCount && descriptionInput) {
      const count = descriptionInput.value.length;
      descCount.textContent = count.toString();
      descCount.className = count > 140 ? 'text-yellow-400' : count > 160 ? 'text-red-400' : 'text-gray-400';
    }
  };

  const updateSaveStatus = (status: string, color = 'gray') => {
    if (saveStatus) {
      const dot = saveStatus.querySelector('div');
      const text = saveStatus.querySelector('span');
      
      if (dot) {
        dot.className = `w-2 h-2 rounded-full mr-2 bg-${color}-400`;
      }
      if (text) {
        text.textContent = status;
        text.className = `text-${color}-400`;
      }
    }
  };

  const showLastSaved = () => {
    if (lastSaved && saveTime) {
      const now = new Date();
      saveTime.textContent = now.toLocaleTimeString();
      lastSaved.classList.remove('hidden');
    }
  };

  // Autoguardado
  const saveDraft = async (showStatus = true) => {
    if (!isFormDirty) return;
    
    if (showStatus) updateSaveStatus('Guardando...', 'yellow');
    
    try {
      const draftData = {
        title: titleInput.value || '',
        slug: slugInput.value || '',
        author: authorInput.value || '',
        description: descriptionInput.value || '',
        content: currentContent || '',
        image: currentImageUrl || '',
        tags: currentTags || [],
        draft: true,
        featured: featuredCheckbox.checked,
        commentsEnabled: commentsEnabledCheckbox.checked,
        updatedAt: serverTimestamp()
      };

      if (currentDraftId) {
        const draftRef = doc(db, "drafts", currentDraftId);
        await setDoc(draftRef, draftData, { merge: true });
      } else {
        const draftsRef = collection(db, "drafts");
        const docRef = await addDoc(draftsRef, {
          ...draftData,
          createdAt: serverTimestamp()
        });
        currentDraftId = docRef.id;
      }

      if (showStatus) {
        updateSaveStatus('Guardado', 'green');
        showLastSaved();
      }
      
      isFormDirty = false;
    } catch (error) {
      console.error("Error al guardar borrador:", error);
      if (showStatus) updateSaveStatus('Error al guardar', 'red');
    }
  };

  const scheduleAutosave = () => {
    if (autosaveTimeout) clearTimeout(autosaveTimeout);
    updateSaveStatus('Cambios sin guardar', 'yellow');
    autosaveTimeout = setTimeout(() => saveDraft(), 3000);
  };

  // Inicializar componentes
  const initializeComponents = async () => {
    // Simular carga de componentes (aquí cargarías los componentes React)
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Configurar eventos del formulario
    setupFormEvents();
    
    // Mostrar editor
    loadingElement.classList.add("hidden");
    editorContainer.classList.remove("hidden");
  };

  const setupFormEvents = () => {
    // Generación automática de slug
    titleInput.addEventListener('input', () => {
      if (!slugInput.value || titleInput.dataset.lastValue === slugInput.value) {
        slugInput.value = generateSlug(titleInput.value);
      }
      titleInput.dataset.lastValue = slugInput.value;
      isFormDirty = true;
      scheduleAutosave();
    });

    // Eventos de campos
    [titleInput, slugInput, descriptionInput, authorInput].forEach(input => {
      input.addEventListener('input', () => {
        isFormDirty = true;
        scheduleAutosave();
        updateCounts();
      });
    });

    [draftCheckbox, featuredCheckbox, commentsEnabledCheckbox].forEach(checkbox => {
      checkbox.addEventListener('change', () => {
        isFormDirty = true;
        scheduleAutosave();
      });
    });

    // Botones
    saveDraftBtn?.addEventListener('click', () => saveDraft(true));
    previewBtn?.addEventListener('click', showPreview);
    publishBtn?.addEventListener('click', handlePublish);
    
    // Modal
    closePreview?.addEventListener('click', () => {
      previewModal?.classList.add('hidden');
    });

    // Inicializar contadores
    updateCounts();
  };

  const showPreview = () => {
    if (!previewContent || !previewModal) return;
    
    try {
      const title = titleInput.value || "Sin título";
      const author = authorInput.value || "Sin autor";
      const description = descriptionInput.value || "Sin descripción";
      const content = currentContent || "*No hay contenido*";
      
      const htmlContent = DOMPurify.sanitize(marked.parse(content));
      
      let previewHtml = `
        <div class="mb-6">
          <h1 class="text-3xl font-bold text-white mb-2">${title}</h1>
          <p class="text-gray-300 mb-4">Por ${author}</p>
          <p class="text-gray-400 italic">${description}</p>
        </div>
      `;
      
      if (currentImageUrl) {
        previewHtml += `
          <div class="mb-6">
            <img src="${currentImageUrl}" alt="${title}" class="w-full h-64 object-cover rounded-lg" />
          </div>
        `;
      }
      
      previewHtml += `<div class="prose prose-invert prose-green max-w-none">${htmlContent}</div>`;
      
      previewContent.innerHTML = previewHtml;
      previewModal.classList.remove("hidden");
    } catch (error) {
      console.error("Error al generar vista previa:", error);
      alert("Error al generar la vista previa.");
    }
  };

  const handlePublish = async (e: Event) => {
    e.preventDefault();
    
    // Validación básica
    if (!titleInput.value || !slugInput.value || !authorInput.value || !descriptionInput.value || !currentContent) {
      if (errorMessage && errorDetails) {
        errorDetails.textContent = "Por favor, completa todos los campos obligatorios.";
        errorMessage.classList.remove("hidden");
      }
      return;
    }
    
    // Mostrar estado de carga
    publishBtn.disabled = true;
    publishBtn.innerHTML = `
      <svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <span>Publicando...</span>
    `;
    
    // Ocultar mensajes previos
    successMessage?.classList.add("hidden");
    errorMessage?.classList.add("hidden");
    
    try {
      const articleData = {
        title: titleInput.value,
        slug: slugInput.value,
        author: authorInput.value,
        description: descriptionInput.value,
        content: currentContent,
        image: currentImageUrl,
        tags: currentTags,
        draft: draftCheckbox.checked,
        featured: featuredCheckbox.checked,
        commentsEnabled: commentsEnabledCheckbox.checked,
        publishDate: Timestamp.fromDate(new Date())
      };
      
      const articlesRef = collection(db, "articles");
      const docRef = await addDoc(articlesRef, {
        ...articleData,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });
      
      // Limpiar borrador
      if (currentDraftId) {
        try {
          await deleteDoc(doc(db, "drafts", currentDraftId));
          currentDraftId = null;
        } catch (error) {
          console.warn("No se pudo eliminar el borrador:", error);
        }
      }
      
      // Mostrar éxito
      if (successMessage && viewArticleLink) {
        viewArticleLink.href = `/blog/${articleData.slug}`;
        successMessage.classList.remove("hidden");
        
        // Limpiar formulario
        if (articleForm) {
          articleForm.reset();
        }
        currentContent = '';
        currentImageUrl = '';
        currentTags = [];
        isFormDirty = false;
        updateCounts();
        updateSaveStatus('Sin cambios', 'gray');
        lastSaved?.classList.add('hidden');
      }
    } catch (error) {
      console.error("Error al publicar artículo:", error);
      
      if (errorMessage && errorDetails) {
        errorDetails.textContent = (error as Error).message || "Ha ocurrido un error inesperado.";
        errorMessage.classList.remove("hidden");
      }
    } finally {
      publishBtn.disabled = false;
      publishBtn.innerHTML = `<span>Publicar artículo</span>`;
    }
  };

  // Inicializar cuando el usuario esté autenticado
  onAuthStateChanged(auth, async (user) => {
    if (user) {
      // Cargar librerías primero
      await loadLibraries();
      
      // Autocompletar autor
      if (user.displayName && authorInput && !authorInput.value) {
        authorInput.value = user.displayName;
      }
      
      // Inicializar componentes
      await initializeComponents();
    }
  });

  // Limpiar al salir
  window.addEventListener('beforeunload', () => {
    if (autosaveTimeout) clearTimeout(autosaveTimeout);
    if (isFormDirty) saveDraft(false);
  });
</script>

<style>
  /* Estilos adicionales para el editor */
  .prose {
    color: #e5e7eb;
  }
  
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    color: #10b981;
  }
  
  .prose a {
    color: #34d399;
  }
  
  .prose blockquote {
    border-left-color: #10b981;
    color: #d1d5db;
  }
  
  .prose code {
    background-color: rgba(16, 185, 129, 0.1);
    color: #34d399;
  }
  
  .prose pre {
    background-color: rgba(16, 185, 129, 0.1);
  }
</style> 