---
import MainLayout from "@/layouts/MainLayout.astro";
import AdminProtection from "@/components/AdminProtection";

export const prerender = false; 
---

<MainLayout title="Administración de Suscriptores | Reino Da Mata">
  <AdminProtection client:load>
    <div class="max-w-6xl mx-auto w-full px-4 py-8">
      <div class="mb-10">
        <h1 class="text-3xl font-bold text-green-700 mb-2">Administración de Suscriptores</h1>
        <p class="text-gray-200">Gestiona los suscriptores del blog.</p>
      </div>

      <div class="bg-green-900/30 p-6 rounded-lg backdrop-blur-sm">
        <!-- Botón de sincronización -->
        <div class="mb-6 flex justify-between items-center">
          <div>
            <h2 class="text-xl font-semibold text-green-400 mb-2">Lista de Suscriptores</h2>
            <p class="text-green-200 text-sm">Administra todos los suscriptores del newsletter</p>
          </div>
          <button 
            id="sync-auth-users" 
            class="px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white font-medium rounded-md transition-colors flex items-center gap-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Sincronizar Usuarios Auth
          </button>
        </div>

        <div id="admin-container" class="relative">
          <!-- Estado de carga inicial -->
          <div id="loading" class="flex justify-center items-center py-10">
            <svg class="animate-spin h-10 w-10 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="ml-3 text-green-300">Cargando suscriptores...</span>
          </div>

          <!-- Contenido principal -->
          <div id="content-container" class="hidden">
            <!-- Contenedor para la tabla de suscriptores -->
            <div id="subscribers-table-container" class="hidden">
              <!-- La tabla se generará dinámicamente aquí -->
            </div>

            <!-- Mensaje de error -->
            <div id="error-message" class="hidden bg-red-900/20 p-4 rounded-lg">
              <div class="flex items-center">
                <svg class="h-5 w-5 text-red-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="text-red-300" id="error-details">Error al cargar los suscriptores</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminProtection>
</MainLayout>

<script>
  // Variables de servicios (se cargarán desde window globals)
  let auth, onAuthStateChanged;
  let getSubscribers, updateSubscriberStatus, deleteSubscriber;
  let functions, httpsCallable;

  // Variables DOM
  let loadingElement, contentContainer, subscribersTableContainer, errorMessageElement, errorDetails;

  // Variables de datos
  let subscribers = [];

  // Función para cargar servicios desde window globals
  async function loadServices() {
    try {
      // Verificar si los servicios ya están disponibles globalmente
      if (window.firebaseConfig && window.subscriberServices) {
        auth = window.firebaseConfig.auth;
        onAuthStateChanged = window.firebaseConfig.onAuthStateChanged;
        functions = window.firebaseConfig.functions;
        httpsCallable = window.firebaseConfig.httpsCallable;
        getSubscribers = window.subscriberServices.getSubscribers;
        updateSubscriberStatus = window.subscriberServices.updateSubscriberStatus;
        deleteSubscriber = window.subscriberServices.deleteSubscriber;
        
        initializeAdmin();
      } else {
        // Fallback: intentar cargar después de un delay
        setTimeout(loadServices, 100);
      }
    } catch (error) {
      console.error('Error loading services:', error);
      showError('Error al cargar los servicios necesarios');
    }
  }

  // Función para obtener elementos del DOM
  const getDOMElements = () => {
    loadingElement = document.getElementById("loading");
    contentContainer = document.getElementById("content-container");
    subscribersTableContainer = document.getElementById("subscribers-table-container");
    errorMessageElement = document.getElementById("error-message");
    errorDetails = document.getElementById("error-details");
  };

  // Función para mostrar errores
  const showError = (message) => {
    getDOMElements();
    if (loadingElement) loadingElement.classList.add("hidden");
    if (contentContainer) contentContainer.classList.remove("hidden");
    if (errorMessageElement) errorMessageElement.classList.remove("hidden");
    if (errorDetails) errorDetails.textContent = message;
  };

  // Función para formatear fecha
  const formatDate = (timestamp) => {
    try {
      if (!timestamp) return "Fecha no disponible";
      
      let date;
      if (timestamp.toDate && typeof timestamp.toDate === 'function') {
        date = timestamp.toDate();
      } else if (timestamp.seconds) {
        date = new Date(timestamp.seconds * 1000);
      } else {
        date = new Date(timestamp);
      }
      
      return new Intl.DateTimeFormat('es-ES', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }).format(date);
    } catch (error) {
      console.error("Error al formatear fecha:", error, "Input:", timestamp);
      return "Error de formato";
    }
  };

  // Función para cargar y mostrar suscriptores
  const loadData = async () => {
    try {
      if (typeof getSubscribers !== 'function') {
        showError('Servicios no cargados. Recarga la página.');
        return;
      }

      // Obtener suscriptores
      subscribers = await getSubscribers();

      // Ocultar carga y mostrar contenido
      getDOMElements();
      if (loadingElement) loadingElement.classList.add("hidden");
      if (contentContainer) contentContainer.classList.remove("hidden");
      if (subscribersTableContainer) subscribersTableContainer.classList.remove("hidden");
      
      renderSubscribers();
    } catch (error) {
      console.error('Error al cargar suscriptores:', error);
      
      let errorMessage = 'Error al cargar los suscriptores';
      
      if (error.code === 'permission-denied') {
        errorMessage = 'Sin permisos para ver suscriptores. Verifica que seas administrador.';
      } else if (error.code === 'unavailable') {
        errorMessage = 'Problema de conexión. Intenta de nuevo.';
      }
      
      showError(errorMessage);
    }
  };

  // Función para renderizar la tabla de suscriptores
  const renderSubscribers = () => {
    if (!subscribersTableContainer) return;

    if (subscribers.length === 0) {
      subscribersTableContainer.innerHTML = `
        <div class="text-center py-10">
          <p class="text-xl text-green-300">No hay suscriptores registrados</p>
        </div>
      `;
      return;
    }

    // Crear tabla con datos
    const tableHTML = `
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-green-700">
          <thead class="bg-green-800/50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-green-300 uppercase tracking-wider">Nombre</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-green-300 uppercase tracking-wider">Email</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-green-300 uppercase tracking-wider">Fuente</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-green-300 uppercase tracking-wider">Fecha de suscripción</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-green-300 uppercase tracking-wider">Estado</th>
              <th class="px-6 py-3 text-right text-xs font-medium text-green-300 uppercase tracking-wider">Acciones</th>
            </tr>
          </thead>
          <tbody class="bg-green-900/20 divide-y divide-green-800">
            ${subscribers.map((subscriber) => {
              const displayName = subscriber.name || `${subscriber.firstName || ''} ${subscriber.lastName || ''}`.trim() || 'Sin nombre';
              const sourceLabels = {
                'web': 'Web',
                'auth_sync': 'Auth (Sync)',
                'auth_auto': 'Auth (Auto)',
                'manual': 'Manual'
              };
              const sourceLabel = sourceLabels[subscriber.source] || 'Desconocido';
              const sourceColor = {
                'web': 'bg-blue-100 text-blue-800',
                'auth_sync': 'bg-purple-100 text-purple-800',
                'auth_auto': 'bg-green-100 text-green-800',
                'manual': 'bg-gray-100 text-gray-800'
              };
              
              return `
              <tr data-id="${subscriber.id}" class="hover:bg-green-800/30">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-white">${displayName}</div>
                  ${subscriber.authUid ? '<div class="text-xs text-green-400">Usuario Auth</div>' : ''}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-green-200">${subscriber.email}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${sourceColor[subscriber.source] || 'bg-gray-100 text-gray-800'}">
                    ${sourceLabel}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-green-200">${formatDate(subscriber.createdAt)}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    subscriber.active 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }">
                    ${subscriber.active ? 'Activo' : 'Inactivo'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <button 
                    onclick="toggleSubscriberStatus('${subscriber.id}', ${subscriber.active})"
                    class="toggle-status text-blue-400 hover:text-blue-300 mr-3"
                  >
                    ${subscriber.active ? 'Desactivar' : 'Activar'}
                  </button>
                  <button 
                    onclick="deleteSubscriberConfirm('${subscriber.id}', '${subscriber.email}')"
                    class="delete-subscriber text-red-400 hover:text-red-300"
                  >
                    Eliminar
                  </button>
                </td>
              </tr>
              `;
            }).join('')}
          </tbody>
        </table>
      </div>
    `;

    subscribersTableContainer.innerHTML = tableHTML;
  };

  // Funciones globales para botones
  (window as any).toggleSubscriberStatus = async function(subscriberId: string, currentStatus: boolean) {
    try {
      await updateSubscriberStatus(subscriberId, !currentStatus);
      // Recargar datos
      await loadData();
    } catch (error) {
      console.error('Error al cambiar estado:', error);
      alert('Error al cambiar el estado del suscriptor');
    }
  };

  (window as any).deleteSubscriberConfirm = async function(subscriberId: string, email: string) {
    if (confirm(`¿Estás seguro de que deseas eliminar al suscriptor ${email}? Esta acción no se puede deshacer.`)) {
      try {
        await deleteSubscriber(subscriberId);
        // Recargar datos
        await loadData();
      } catch (error) {
        console.error('Error al eliminar:', error);
        alert('Error al eliminar el suscriptor');
      }
    }
  };

  // Función para sincronizar usuarios de Auth
  async function syncAuthUsers() {
    console.log('🔄 Iniciando sincronización de usuarios Auth...');
    
    const syncButton = document.getElementById('sync-auth-users');
    if (!syncButton) {
      console.error('❌ No se encontró el botón de sincronización');
      return;
    }

    try {
      // Verificar que las dependencias estén disponibles
      console.log('🔍 Verificando dependencias:', { 
        functions: !!functions, 
        httpsCallable: !!httpsCallable,
        auth: !!auth,
        firebaseConfig: !!window.firebaseConfig
      });

      // Cambiar estado del botón
      syncButton.disabled = true;
      syncButton.innerHTML = `
        <svg class="animate-spin w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Sincronizando...
      `;

      // Llamar a la función Firebase
      if (!functions || !httpsCallable) {
        throw new Error('Firebase Functions no disponible. Verifica la configuración.');
      }

      console.log('📞 Llamando a la función syncAuthUsersToSubscribers...');
      const syncFunction = httpsCallable(functions, 'syncAuthUsersToSubscribers');
      const result = await syncFunction();

      console.log('📤 Respuesta de la función:', result);

      if (result.data?.success) {
        console.log('✅ Sincronización exitosa:', result.data.message);
        alert(`✅ ${result.data.message}`);
        // Recargar la lista de suscriptores
        await loadData();
      } else {
        console.error('❌ Error en la función:', result.data?.message);
        alert(`❌ Error: ${result.data?.message || 'Error desconocido'}`);
      }

    } catch (error) {
      console.error('❌ Error en sincronización:', error);
      alert(`❌ Error al sincronizar: ${error.message}`);
    } finally {
      // Restaurar botón
      syncButton.disabled = false;
      syncButton.innerHTML = `
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
        </svg>
        Sincronizar Usuarios Auth
      `;
    }
  }

  // Función de inicialización principal
  function initializeAdmin() {
    console.log('🚀 Inicializando panel de administración de suscriptores...');
    
    // Obtener elementos DOM al inicializar
    getDOMElements();

    // Configurar botón de sincronización
    setupSyncButton();

    // Inicializar cuando el usuario esté autenticado
    onAuthStateChanged(auth, (user) => {
      if (user) {
        console.log('👤 Usuario autenticado, cargando datos...', user.email);
        setTimeout(() => {
          getDOMElements();
          loadData();
          
          // Reconfigurar el botón después de cargar los datos (por si el DOM cambió)
          setupSyncButton();
        }, 100);
      } else {
        console.log('🚫 Usuario no autenticado');
      }
    });
  }

  // Función para configurar el botón de sincronización
  function setupSyncButton() {
    const syncButton = document.getElementById('sync-auth-users');
    if (syncButton && !syncButton.hasAttribute('data-listener-configured')) {
      console.log('🔧 Configurando botón de sincronización...');
      
      // Agregar evento de debugging primero
      syncButton.addEventListener('click', (e) => {
        console.log('🖱️ Click detectado en botón de sincronización', e);
      });
      
      // Agregar la función principal
      syncButton.addEventListener('click', syncAuthUsers);
      syncButton.setAttribute('data-listener-configured', 'true');
      console.log('✅ Botón de sincronización configurado correctamente');
      
      // Test manual en la consola
      (window as any).testSyncButton = () => {
        console.log('🧪 Test manual del botón de sincronización...');
        syncAuthUsers();
      };
      console.log('💡 Prueba manual disponible: testSyncButton()');
    } else if (syncButton) {
      console.log('⚠️ Botón ya configurado');
    } else {
      console.log('❌ Botón de sincronización no encontrado en el DOM');
    }
  }

  // Cargar servicios cuando la página se cargue
  document.addEventListener('DOMContentLoaded', () => {
    console.log('📄 DOM cargado, inicializando...');
    loadServices();
    
    // Configurar botón inmediatamente si está disponible
    setupSyncButton();
    
    // También intentar configurar después de un pequeño delay
    setTimeout(setupSyncButton, 500);
  });
</script>