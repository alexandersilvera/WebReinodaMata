---
import MainLayout from "@/layouts/MainLayout.astro";
---

<MainLayout title="Cancelar suscripción | Reino Da Mata">
  <div class="max-w-3xl mx-auto w-full px-4 py-12">
    <div class="bg-green-900/30 p-8 rounded-xl backdrop-blur-sm">
      <div id="unsubscribe-container" class="text-center">
        <h1 class="text-3xl font-bold text-green-500 mb-6">Cancelar Suscripción</h1>
        
        <!-- Estado inicial: Cargando -->
        <div id="loading" class="py-8">
          <svg class="animate-spin h-10 w-10 text-green-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p class="mt-4 text-white">Procesando tu solicitud...</p>
        </div>
        
        <!-- Formulario de confirmación -->
        <div id="confirm-form" class="hidden py-8">
          <p class="text-white text-lg mb-6">¿Estás seguro de que deseas cancelar tu suscripción? Ya no recibirás actualizaciones sobre nuevos artículos y actividades.</p>
          
          <div class="flex justify-center gap-4">
            <button id="cancel-btn" class="px-6 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-md shadow-md transition-colors">
              No, mantener suscripción
            </button>
            <button id="confirm-btn" class="px-6 py-2 bg-red-600 hover:bg-red-500 text-white rounded-md shadow-md transition-colors">
              Sí, cancelar suscripción
            </button>
          </div>
        </div>
        
        <!-- Mensaje de éxito -->
        <div id="success" class="hidden py-8">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-green-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          <h2 class="text-2xl font-semibold text-green-500 mb-2">Suscripción cancelada</h2>
          <p class="text-white mb-6">Hemos cancelado tu suscripción correctamente. Ya no recibirás más correos de nuestra parte.</p>
          <a href="/" class="inline-block px-6 py-2 bg-green-600 hover:bg-green-500 text-white rounded-md shadow-md transition-colors">
            Volver al inicio
          </a>
        </div>
        
        <!-- Mensaje de error -->
        <div id="error" class="hidden py-8">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-red-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
          <h2 class="text-2xl font-semibold text-red-500 mb-2">Ha ocurrido un error</h2>
          <p id="error-message" class="text-white mb-6">No pudimos procesar tu solicitud. Por favor, intenta de nuevo más tarde.</p>
          <a href="/" class="inline-block px-6 py-2 bg-green-600 hover:bg-green-500 text-white rounded-md shadow-md transition-colors">
            Volver al inicio
          </a>
        </div>
        
        <!-- Mensaje de enlace inválido -->
        <div id="invalid-link" class="hidden py-8">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-yellow-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
          <h2 class="text-2xl font-semibold text-yellow-500 mb-2">Enlace inválido</h2>
          <p class="text-white mb-6">El enlace de cancelación no es válido o ha expirado. Si deseas cancelar tu suscripción, por favor contacta con nosotros.</p>
          <a href="/" class="inline-block px-6 py-2 bg-green-600 hover:bg-green-500 text-white rounded-md shadow-md transition-colors">
            Volver al inicio
          </a>
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  import { doc, getDoc, updateDoc } from 'firebase/firestore';
  import { db } from '@/core/firebase/config';
  
  // Elementos del DOM
  const loadingElement = document.getElementById('loading');
  const confirmFormElement = document.getElementById('confirm-form');
  const successElement = document.getElementById('success');
  const errorElement = document.getElementById('error');
  const errorMessageElement = document.getElementById('error-message');
  const invalidLinkElement = document.getElementById('invalid-link');
  
  // Obtener parámetros de la URL
  const urlParams = new URLSearchParams(window.location.search);
  const subscriberId = urlParams.get('id');
  const email = urlParams.get('email');
  
  // Función para mostrar un elemento y ocultar los demás
  const showElement = (element) => {
    [loadingElement, confirmFormElement, successElement, errorElement, invalidLinkElement].forEach(el => {
      if (el) el.classList.add('hidden');
    });
    if (element) element.classList.remove('hidden');
  };
  
  // Función para verificar los parámetros de la URL
  const verifyUnsubscribeParams = async () => {
    // Verificar que los parámetros existen
    if (!subscriberId || !email) {
      showElement(invalidLinkElement);
      return { valid: false };
    }
    
    try {
      // Obtener documento del suscriptor
      const subscriberRef = doc(db, 'subscribers', subscriberId);
      const subscriberDoc = await getDoc(subscriberRef);
      
      // Verificar que el documento existe y el email coincide
      if (!subscriberDoc.exists()) {
        showElement(invalidLinkElement);
        return { valid: false };
      }
      
      const subscriberData = subscriberDoc.data();
      if (subscriberData.email !== email) {
        showElement(invalidLinkElement);
        return { valid: false };
      }
      
      // Si el suscriptor ya está inactivo, mostrar éxito
      if (subscriberData.active === false) {
        showElement(successElement);
        return { valid: false };
      }
      
      return { valid: true, subscriberRef };
    } catch (error) {
      console.error('Error al verificar suscripción:', error);
      showElement(errorElement);
      return { valid: false };
    }
  };
  
  // Función para procesar la desuscripción
  const unsubscribe = async () => {
    try {
      showElement(loadingElement);
      
      const { valid, subscriberRef } = await verifyUnsubscribeParams();
      
      if (!valid) return;
      
      // Mostrar formulario de confirmación
      showElement(confirmFormElement);
      
      // Manejar clic en botón de confirmación
      document.getElementById('confirm-btn')?.addEventListener('click', async () => {
        try {
          showElement(loadingElement);
          
          // Actualizar estado del suscriptor a inactivo
          await updateDoc(subscriberRef, { active: false });
          
          // Mostrar mensaje de éxito
          showElement(successElement);
        } catch (error) {
          console.error('Error al cancelar suscripción:', error);
          if (errorMessageElement) {
            errorMessageElement.textContent = 'No pudimos cancelar tu suscripción. Por favor, intenta de nuevo más tarde.';
          }
          showElement(errorElement);
        }
      });
      
      // Manejar clic en botón de cancelar
      document.getElementById('cancel-btn')?.addEventListener('click', () => {
        window.location.href = '/';
      });
    } catch (error) {
      console.error('Error general:', error);
      showElement(errorElement);
    }
  };
  
  // Iniciar proceso
  document.addEventListener('DOMContentLoaded', unsubscribe);
</script> 