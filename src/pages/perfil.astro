---
import MainLayout from '@/layouts/MainLayout.astro';
import AdminProtection from '@/components/AdminProtection';
---

<MainLayout title="Perfil de Usuario | Reino Da Mata">
  <div class="max-w-4xl mx-auto w-full px-4 py-8">
    <div class="mb-6">
      <h1 class="text-3xl font-bold text-green-700 mb-2">Mi Perfil</h1>
      <p class="text-gray-200">Personaliza tu información y configuraciones de cuenta.</p>
    </div>

    <div id="admin-container" class="relative">
      <!-- Estado de carga inicial -->
      <div id="loading-state" class="flex justify-center items-center py-20">
        <div class="text-center">
          <svg class="animate-spin h-12 w-12 text-green-500 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p class="text-green-300 text-lg">Cargando perfil...</p>
        </div>
      </div>

      <!-- Estado para usuarios no autenticados -->
      <div id="logged-out-state" class="hidden text-center py-20">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-24 w-24 mx-auto text-gray-400 mb-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h2 class="text-2xl font-bold text-gray-300 mb-4">Acceso Requerido</h2>
        <p class="text-gray-200 mb-8">Necesitas iniciar sesión para acceder a tu perfil.</p>
        <a href="/login" class="inline-block px-6 py-3 bg-green-600 hover:bg-green-500 text-white font-medium rounded-lg shadow-md transition-colors">
          Iniciar Sesión
        </a>
      </div>

      <!-- Formulario de perfil -->
      <div id="profile-form-container" class="hidden">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Panel de avatar -->
          <div class="lg:col-span-1">
            <div class="bg-green-900/30 p-6 rounded-xl backdrop-blur-sm text-center">
              <h3 class="text-xl font-semibold text-green-400 mb-4">Avatar</h3>
              <div class="relative inline-block mb-4">
                <img id="avatar-preview" src="/images/default-avatar.png" alt="Avatar del usuario" 
                     class="w-32 h-32 rounded-full object-cover border-4 border-green-500/50">
                <label for="avatar-upload" class="absolute bottom-0 right-0 bg-green-600 hover:bg-green-500 text-white p-2 rounded-full cursor-pointer transition-colors shadow-lg">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                </label>
                <input id="avatar-upload" type="file" accept="image/*" class="hidden">
              </div>
              <p class="text-gray-300 text-sm mb-2">Haz clic en el ícono para cambiar tu avatar</p>
              <p class="text-gray-400 text-xs">Formatos: JPG, PNG, GIF (máx. 5MB)</p>
              <div id="upload-status" class="mt-2 text-sm"></div>
            </div>
          </div>

          <!-- Panel de información -->
          <div class="lg:col-span-2">
            <div class="bg-green-900/30 p-6 rounded-xl backdrop-blur-sm">
              <h3 class="text-xl font-semibold text-green-400 mb-6">Información Personal</h3>
              
              <form id="profile-form" class="space-y-6">
                <!-- Email (readonly) -->
                <div>
                  <label for="email" class="block text-white text-sm font-medium mb-2">
                    Correo Electrónico
                  </label>
                  <input id="email" type="email" readonly
                         class="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-gray-300 cursor-not-allowed">
                  <p class="text-gray-400 text-xs mt-1">El correo electrónico no se puede modificar</p>
                </div>

                <!-- Nombre para mostrar -->
                <div>
                  <label for="display-name" class="block text-white text-sm font-medium mb-2">
                    Nombre para Mostrar
                  </label>
                  <input id="display-name" type="text" placeholder="Tu nombre público"
                         class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-colors">
                  <p class="text-gray-400 text-xs mt-1">Este nombre aparecerá en tus comentarios y actividades</p>
                </div>

                <!-- Biografía -->
                <div>
                  <label for="bio" class="block text-white text-sm font-medium mb-2">
                    Biografía
                  </label>
                  <textarea id="bio" rows="4" placeholder="Cuéntanos un poco sobre ti..."
                            class="w-full px-4 py-3 bg-green-700/50 border border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 text-white transition-colors resize-y"></textarea>
                  <p class="text-gray-400 text-xs mt-1">Máximo 500 caracteres</p>
                </div>

                <!-- Botón de guardar -->
                <div class="flex justify-end">
                  <button id="save-button" type="submit" 
                          class="px-8 py-3 bg-green-600 hover:bg-green-500 text-white font-medium rounded-lg shadow-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                    Guardar Cambios
                  </button>
                </div>
              </form>

              <!-- Mensaje de estado -->
              <div id="status-message" class="hidden mt-4 p-3 rounded-lg">
                <span id="status-text"></span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
    import { onAuthStateChanged } from 'firebase/auth';
    import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';
    import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
    import { auth, db, storage } from '@/core/firebase/config';

    // Definir el tipo para los datos del perfil
    interface ProfileData {
        displayName?: string;
        bio?: string;
        photoURL?: string;
        updatedAt?: any;
    }

    // Variables globales
    let currentUserId: string | null = null;
    let selectedFile: File | null = null;
    let isSaving = false;
    let globalAuthUnsubscribe: (() => void) | null = null;
    let profileData: ProfileData = {};

    function initializeProfilePage() {
        console.log('[Perfil] Inicializando página de perfil...');

        // --- DOM Elements ---
        const loadingState = document.getElementById('loading-state');
        const loggedOutState = document.getElementById('logged-out-state');
        const profileFormContainer = document.getElementById('profile-form-container');
        const profileForm = document.getElementById('profile-form') as HTMLFormElement | null;
        const displayNameInput = document.getElementById('display-name') as HTMLInputElement | null;
        const emailInput = document.getElementById('email') as HTMLInputElement | null;
        const bioInput = document.getElementById('bio') as HTMLTextAreaElement | null;
        const avatarPreview = document.getElementById('avatar-preview') as HTMLImageElement | null;
        const avatarUploadInput = document.getElementById('avatar-upload') as HTMLInputElement | null;
        const saveButton = document.getElementById('save-button') as HTMLButtonElement | null;
        const uploadStatus = document.getElementById('upload-status');
        const statusMessage = document.getElementById('status-message');
        const statusText = document.getElementById('status-text');

        // --- Utility Functions ---
        function showStatusMessage(message: string, isError = false) {
            if (!statusMessage || !statusText) return;
            if (!message) { statusMessage.classList.add('hidden'); return; }
            statusText.textContent = message;
            statusMessage.className = 'mt-4 p-3 rounded-lg';
            statusMessage.classList.toggle('bg-red-600/80', isError);
            statusMessage.classList.toggle('text-red-100', isError);
            statusMessage.classList.toggle('bg-green-600/80', !isError);
            statusMessage.classList.toggle('text-green-100', !isError);
            statusMessage.classList.remove('hidden');
            const targetSpan = statusText;
            if (targetSpan) {
                targetSpan.classList.toggle('text-red-400', isError);
                targetSpan.classList.toggle('text-green-400', !isError);
                setTimeout(() => { targetSpan.classList.add('hidden'); targetSpan.textContent = ''; }, 4000);
            }
        }

        async function loadUserProfile(userId: string) {
            if (!displayNameInput || !bioInput || !avatarPreview) return; // Guard if elements missing
            const userProfileRef = doc(db, 'userProfiles', userId);
            try {
                const docSnap = await getDoc(userProfileRef);
                if (docSnap.exists()) {
                    profileData = docSnap.data() as ProfileData;
                    displayNameInput.value = profileData.displayName || '';
                    bioInput.value = profileData.bio || '';
                    avatarPreview.src = profileData.photoURL || '/images/default-avatar.png';
                } else {
                    displayNameInput.value = auth.currentUser?.displayName || '';
                    avatarPreview.src = auth.currentUser?.photoURL || '/images/default-avatar.png';
                    profileData = { displayName: displayNameInput.value, photoURL: avatarPreview.src, bio: '' };
                }
            } catch (error) {
                console.error("[Perfil] Error loading user profile:", error);
                showStatusMessage('Error al cargar el perfil.', true);
                avatarPreview.src = '/images/default-avatar.png';
            }
        }

        // --- Event Handlers ---
        const handleAvatarChange = (event: Event) => {
            if (!avatarUploadInput || !avatarPreview) return;
            const files = (event.target as HTMLInputElement).files;
            if (files && files.length > 0) {
                const file = files[0];
                // Basic validation (type and size)
                // ... (validation logic as before) ...
                selectedFile = file;
                const reader = new FileReader();
                reader.onload = (e) => { if(avatarPreview) avatarPreview.src = e.target?.result as string; };
                reader.readAsDataURL(selectedFile);
                if(uploadStatus) uploadStatus.textContent = `Seleccionado: ${file.name.substring(0,20)}...`;
            } else { selectedFile = null; }
        };

        const handleProfileFormSubmit = async (e: Event) => {
            e.preventDefault();
            if (!currentUserId || isSaving || !saveButton || !displayNameInput || !bioInput) return;

            isSaving = true;
            saveButton.disabled = true;
            saveButton.textContent = 'Guardando...';
            showStatusMessage(''); 
            if(uploadStatus && !selectedFile) uploadStatus.textContent = '';

            let newAvatarURL = profileData.photoURL || auth.currentUser?.photoURL || null;

            if (selectedFile) {
                if(uploadStatus) uploadStatus.textContent = 'Subiendo avatar...';
                const fileExtension = selectedFile.name.split('.').pop();
                const fileName = `avatar.${fileExtension}`;
                const storageRefPath = `userProfiles/${currentUserId}/${fileName}`;
                const fileStorageRef = ref(storage, storageRefPath);
                try {
                    const snapshot = await uploadBytes(fileStorageRef, selectedFile);
                    newAvatarURL = await getDownloadURL(snapshot.ref);
                    if(uploadStatus) uploadStatus.textContent = 'Avatar subido.';
                    selectedFile = null; 
                } catch (error) {
                    console.error("[Perfil] Error uploading avatar:", error);
                    showStatusMessage('Error al subir el avatar.', true);
                    if(uploadStatus) uploadStatus.textContent = 'Error al subir.';
                    isSaving = false; saveButton.disabled = false; saveButton.textContent = 'Guardar Cambios';
                    return;
                }
            }

            const dataToSave: ProfileData = {
                displayName: displayNameInput.value.trim() || 'Usuario Anónimo',
                bio: bioInput.value.trim(),
                photoURL: newAvatarURL,
                updatedAt: serverTimestamp()
            };

            // Actualizar la vista antes de guardar (inmediatez visual)
            if (avatarPreview) avatarPreview.src = newAvatarURL || '/images/default-avatar.png';

            // Guardar en localStorage para persistencia temporal
            try {
                const profileCache = {
                    uid: currentUserId,
                    photoURL: newAvatarURL,
                    displayName: dataToSave.displayName,
                    timestamp: new Date().getTime()
                };
                localStorage.setItem('userProfileData', JSON.stringify(profileCache));
                console.log('[Perfil] Datos de perfil guardados en localStorage para persistencia:', profileCache);
            } catch (e) {
                console.warn('[Perfil] No se pudo guardar en localStorage:', e);
            }

            const userProfileRef = doc(db, 'userProfiles', currentUserId);
            try {
                await setDoc(userProfileRef, dataToSave, { merge: true });
                profileData = { ...profileData, ...dataToSave }; 
                showStatusMessage('Perfil guardado con éxito!');
                
                // Disparar evento con detalles completos del perfil
                for (let i = 0; i < 3; i++) { // Disparamos varias veces para asegurar que se procese
                    setTimeout(() => {
                        window.dispatchEvent(new CustomEvent('profileUpdated', { 
                            detail: { 
                                photoURL: dataToSave.photoURL,
                                displayName: dataToSave.displayName,
                                userId: currentUserId,
                                timestamp: new Date().getTime()
                            } 
                        }));
                        console.log(`[Perfil] Evento profileUpdated #${i+1} disparado con:`, dataToSave.photoURL);
                    }, 300 * (i+1)); // Disparamos a intervalos para aumentar probabilidad de éxito
                }
                
            } catch (error) {
                console.error("[Perfil] Error saving profile:", error);
                showStatusMessage('Error al guardar el perfil.', true);
            } finally {
                isSaving = false; saveButton.disabled = false; saveButton.textContent = 'Guardar Cambios';
                if (uploadStatus && !uploadStatus.textContent?.includes('Error')) {
                    setTimeout(() => { if(uploadStatus) uploadStatus.textContent = ''; }, 3000);
                }
            }
        };
        
        // --- Auth State Change Listener ---
        if (globalAuthUnsubscribe) {
            globalAuthUnsubscribe(); 
        }

        globalAuthUnsubscribe = onAuthStateChanged(auth, async (user) => {
            if(loadingState) loadingState.classList.add('hidden'); 

            if (user) {
                currentUserId = user.uid;
                if(profileFormContainer) profileFormContainer.classList.remove('hidden');
                if(loggedOutState) loggedOutState.classList.add('hidden');
                if(emailInput) emailInput.value = user.email || '';
                await loadUserProfile(user.uid);
            } else {
                currentUserId = null;
                if(profileFormContainer) profileFormContainer.classList.add('hidden');
                if(loggedOutState) loggedOutState.classList.remove('hidden');
                if(displayNameInput) displayNameInput.value = '';
                if(emailInput) emailInput.value = '';
                if(bioInput) bioInput.value = '';
                if(avatarPreview) avatarPreview.src = '/images/default-avatar.png';
                if(uploadStatus) uploadStatus.textContent = '';
            }
        });

        // --- Attach Event Listeners ---
        // Check if elements exist before adding listeners
        if (avatarUploadInput) {
            avatarUploadInput.removeEventListener('change', handleAvatarChange);
            avatarUploadInput.addEventListener('change', handleAvatarChange);
        } else { console.warn('[Perfil] Avatar upload input not found, listener not attached.'); }

        if (profileForm) {
            profileForm.removeEventListener('submit', handleProfileFormSubmit);
            profileForm.addEventListener('submit', handleProfileFormSubmit);
        } else { console.warn('[Perfil] Profile form not found, listener not attached.'); }
    }

    function runInitializationIfOnProfilePage() {
        if (window.location.pathname === '/perfil' || window.location.pathname.startsWith('/perfil/')) {
            initializeProfilePage();
        } else {
            if (globalAuthUnsubscribe) {
                globalAuthUnsubscribe();
                globalAuthUnsubscribe = null;
            }
        }
    }

    // Run on initial script load (after DOM parsing for .astro files)
    // and on client-side navigation through Astro.
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', runInitializationIfOnProfilePage);
    } else {
        runInitializationIfOnProfilePage(); 
    }
    document.addEventListener('astro:page-load', runInitializationIfOnProfilePage);

</script>

<style>
    /* Optional: Style file input trigger */
    input[type="file"]:focus + label {
        outline: 2px solid var(--accent); /* Example focus style */
        outline-offset: 2px;
    }
</style>
