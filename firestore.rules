rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Obtener emails de administradores con fallback robusto
    function getAdminEmails() {
      // Por ahora usar configuración estática mientras implementamos la dinámica
      // TODO: Implementar lectura dinámica cuando la configuración esté estable
      return [
        'alexandersilvera@hotmail.com',
        'admin@centroumbandistareinodamata.org',
        'administrador@centroumbandistareinodamata.org'
      ];
    }
    
    // Verificar si el usuario es administrador
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.email in getAdminEmails();
    }
    
    // Verificar que el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función auxiliar para validar datos de suscriptores
    function isValidSubscriber(data) {
      return data.keys().hasAll(['email', 'active']) &&
             data.email is string &&
             data.email.matches('.*@.*\\..*') &&
             data.active is bool;
    }
    
    // Reglas para artículos
    match /articles/{articleId} {
      // Permitir lectura a cualquier usuario (artículos públicos)
      allow read: if true;
      
      // Solo el administrador puede crear, actualizar y eliminar artículos
      allow create, update, delete: if isAdmin();
    }
    
    // Reglas para borradores
    match /drafts/{draftId} {
      // Solo el administrador puede leer, crear, actualizar y eliminar borradores
      allow read, write: if isAdmin();
    }
    
    // Reglas para perfiles de usuario
    match /userProfiles/{userId} {
      // Permitir lectura a todos los usuarios autenticados
      allow read: if isAuthenticated();
      
      // Permitir escritura solo al propio usuario o al administrador
      allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }
    
    // Reglas para comentarios
    match /comments/{commentId} {
      // Permitir lectura a cualquier usuario
      allow read: if true;
      
      // Permitir crear comentarios solo a usuarios autenticados
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
      
      // Permitir eliminar solo al autor del comentario o al administrador
      allow delete: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || isAdmin());
      
      // Solo el administrador puede actualizar comentarios (moderación)
      allow update: if isAdmin();
    }
    
    // Reglas para suscriptores
    match /subscribers/{subscriberId} {
      // Solo el administrador puede leer todos los suscriptores
      allow read: if isAdmin();
      
      // Permitir crear suscriptores con validación de datos
      allow create: if isValidSubscriber(request.resource.data) &&
                    request.resource.data.email.size() > 0 &&
                    request.resource.data.email.size() <= 100;
      
      // Permitir actualizar solo para cancelar suscripción (campo active) o administración
      allow update: if isAdmin() || 
                    (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['active']) &&
                     request.resource.data.active == false);
      
      // Solo el administrador puede eliminar suscriptores
      allow delete: if isAdmin();
    }
    
    // Reglas para vistas de página (analytics básico)
    match /pageViews/{viewId} {
      // Permitir crear vistas a cualquier usuario (para analytics)
      allow create: if request.resource.data.keys().hasAll(['path', 'timestamp']) &&
                    request.resource.data.path is string &&
                    request.resource.data.path.size() > 0;
      
      // Solo el administrador puede leer analytics
      allow read: if isAdmin();
      
      // Solo el administrador puede actualizar/eliminar analytics
      allow update, delete: if isAdmin();
    }
    
    // Reglas para configuración del sitio
    match /siteConfig/{configId} {
      // Solo administradores pueden gestionar configuración
      allow read, write: if isAdmin();
    }

    // Reglas específicas para configuración de administradores
    match /siteConfig/adminEmails {
      // Permitir lectura a cualquier usuario autenticado (necesario para las reglas)
      allow read: if isAuthenticated();
      
      // Solo administradores pueden actualizar la configuración
      allow write: if isAdmin() && 
                   request.resource.data.keys().hasAll(['emails', 'lastUpdated', 'updatedBy']) &&
                   request.resource.data.emails is list &&
                   request.resource.data.emails.size() > 0 &&
                   request.resource.data.updatedBy is string;
    }
    
    // Reglas para sincronizaciones fallidas (solo lectura/escritura para admin)
    match /failed_syncs/{syncId} {
      // Solo administradores pueden leer y gestionar sincronizaciones fallidas
      allow read, write: if isAdmin();
    }
    
    // Reglas para errores de triggers (solo lectura/escritura para admin)
    match /trigger_errors/{errorId} {
      // Solo administradores pueden leer errores de triggers
      allow read, write: if isAdmin();
    }
    
    // Reglas para métricas de sincronización (solo lectura para admin)
    match /sync_metrics/{metricId} {
      // Solo administradores pueden leer métricas de sincronización
      allow read, write: if isAdmin();
    }
    
    // Regla por defecto - denegar acceso a cualquier otra colección
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 